{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mecotronics Documentation Project Brief The main objective of this project is to develop a real-world application based on the object-oriented database Matisse . I had a few lectures on it during my degree and became fond of it, mainly because the languages I use on a daily basis ( Java / C# ) are object-oriented. Naturally, a project based on pure objects fits this interest of mine best. Therefore, I decided to build an electronic shop with multiple applications for selling, managing, and purchasing electronic products. Deliverables By the end of this project, I aim to present the following applications: Backend (Spring Boot) Point-of-Sale Application (WPF) Inventory Management (WPF) Web UI (Spring MVC) These correspond to the different application projects that will be developed: Matisse Enterprise Management Project Spring Boot Project Inventory Application Point-of-Sale Application Web Application Development Approach There isn't a one-size-fits-all approach to developing an application of this magnitude. For the sake of my sanity\u2014and to minimize major rewrites and refactoring\u2014I've chosen to follow the Lean Startup methodology. Since this project consists of multiple applications, it would be unwise to fully design the database before building out the backend. If any issues arise later, they could require extensive refactoring. To avoid that, I\u2019ll develop the database and backend in tandem and with an incremental approach. This allows me to quickly prototype features and make necessary changes along the way.","title":"Home"},{"location":"#mecotronics-documentation","text":"","title":"Mecotronics Documentation"},{"location":"#project-brief","text":"The main objective of this project is to develop a real-world application based on the object-oriented database Matisse . I had a few lectures on it during my degree and became fond of it, mainly because the languages I use on a daily basis ( Java / C# ) are object-oriented. Naturally, a project based on pure objects fits this interest of mine best. Therefore, I decided to build an electronic shop with multiple applications for selling, managing, and purchasing electronic products.","title":"Project Brief"},{"location":"#deliverables","text":"By the end of this project, I aim to present the following applications: Backend (Spring Boot) Point-of-Sale Application (WPF) Inventory Management (WPF) Web UI (Spring MVC) These correspond to the different application projects that will be developed: Matisse Enterprise Management Project Spring Boot Project Inventory Application Point-of-Sale Application Web Application","title":"Deliverables"},{"location":"#development-approach","text":"There isn't a one-size-fits-all approach to developing an application of this magnitude. For the sake of my sanity\u2014and to minimize major rewrites and refactoring\u2014I've chosen to follow the Lean Startup methodology. Since this project consists of multiple applications, it would be unwise to fully design the database before building out the backend. If any issues arise later, they could require extensive refactoring. To avoid that, I\u2019ll develop the database and backend in tandem and with an incremental approach. This allows me to quickly prototype features and make necessary changes along the way.","title":"Development Approach"},{"location":"backend/","text":"Spring Boot Backend","title":"Backend"},{"location":"backend/#spring-boot-backend","text":"","title":"Spring Boot Backend"},{"location":"database/","text":"Database Diving into this project felt like having enthusiasm of a hundred neophytes. I was eager to apply the powerful database concepts I had only recently learned in class and Matisse, the post-relational SQL database, seemed like the perfect tool to do just that. Why Matisse? Matisse , the post relational sql database . Isn't particually a new kid on the block but rather unfortunately its been discontinued due to lack of mass adoption of Object Oriented Database Management Systems. Which is unfortunate because matisse isn't a pure OODBMS . According to them: Designed to benefit both object developers and database administrators, Matisse combines native support for Object, XML and SQL within a single database. Unlike traditional relational databases or even pure object-oriented database management systems (OODBMS), Matisse provides native support for: Objects: Directly storing and retrieving instances of classes from C#, Java, or Python. SQL: Running familiar relational queries. XML: Integrating hierarchical and semi-structured data when needed. Key Strengths: Eliminates the need for ORMs: Your application\u2019s classes can be directly mapped to the database schema. Strong type safety: Object relationships and constraints are embedded in the schema, promoting a clean domain model. Powerful indexing: Native indexing options on almost every entity make for efficient querying. These are but a few of the main reasons I decided to use matisse for this project, it allows me to draw up one database schema that in itself maps to application models without having to write boilerplate code two times. Database Schema Employees & Departments Employee The central model representing workers in the organization. Attributes : Basic identification, contact, and employment details (e.g. HireDate , Salary , Commission , Photo ). Relationships : MemberOf : Links an employee to their department. Head : One employee may head a department. Job : Each employee is assigned an Occupation . EmployeeRole : Permissions or access level abstraction. Credentials : One-to-one mapping to EmployeeLogin . HomeAddress : Optional residential link. Indexes on EmployeeNumber , Firstname , and Surname help fast retrieval by key identity or name. Department Organizational unit with: A list of Members (employees). An optional DepartmentHead (employee). Indexed by a unique DepartmentNumber . Authentication & Access Control EmployeeLogin Credentials stored separately with: Username (unique), Password , and LastLogin . Inverse relationship to a single Employee . Role Represents the permission level or functional group in the system. Roles have names, optional descriptions, and AccessLevel . Connected to many employees. Jobs and Occupations Occupation Job titles or duties \u2014 e.g., \"Technician\", \"Salesperson\". Related to multiple employees. Indexed by Name for fast role-based lookups. Clients & Addresses Client Represents a customer: Contact info ( Email , Mobile ) and metadata ( RegistrationDate , DateOfBirth ). Linked to: ClientCard : optional loyalty card. ClientAddress : optional home address. Indexed on ClientId and full name. Address Shared address entity used by both clients and employees: Standard address fields with optional State . Two relationships: EmployeeResidents ClientResidents Loyalty Cards ClientCard Optional card associated with a client: Attributes like Points , Status , ExpiryDate , and CardImage . Linked to exactly one CardHolder ( Client ). Products and Categories Category Used to classify Products . Each has: A Name and Description . Linked to multiple products. Indexed by Name . Product Represents a purchasable item in the system: Attributes for physical characteristics ( Weight , Dimensions , EnergyConsumption , etc.). Metadata ( Colours , Description , ReleaseDate , Images ). Belongs to a Category . Indexed on: Reference (primary key) Combination of Brand and Name . Specialized Product: Television Inherits from Product , and adds: ScreenSize , Technology , RefreshRate Smart features: SmartTv , OperatingSystem , RemoteControl Inputs: NumberOfHdmi , NumberOfUsb , HeadphoneJack Audio/video capabilities like Hdr , AudioTechnology This inheritance allows reusing common product properties while enriching them with television-specific attributes.","title":"Database"},{"location":"database/#database","text":"Diving into this project felt like having enthusiasm of a hundred neophytes. I was eager to apply the powerful database concepts I had only recently learned in class and Matisse, the post-relational SQL database, seemed like the perfect tool to do just that.","title":"Database"},{"location":"database/#why-matisse","text":"Matisse , the post relational sql database . Isn't particually a new kid on the block but rather unfortunately its been discontinued due to lack of mass adoption of Object Oriented Database Management Systems. Which is unfortunate because matisse isn't a pure OODBMS . According to them: Designed to benefit both object developers and database administrators, Matisse combines native support for Object, XML and SQL within a single database. Unlike traditional relational databases or even pure object-oriented database management systems (OODBMS), Matisse provides native support for: Objects: Directly storing and retrieving instances of classes from C#, Java, or Python. SQL: Running familiar relational queries. XML: Integrating hierarchical and semi-structured data when needed.","title":"Why Matisse?"},{"location":"database/#key-strengths","text":"Eliminates the need for ORMs: Your application\u2019s classes can be directly mapped to the database schema. Strong type safety: Object relationships and constraints are embedded in the schema, promoting a clean domain model. Powerful indexing: Native indexing options on almost every entity make for efficient querying. These are but a few of the main reasons I decided to use matisse for this project, it allows me to draw up one database schema that in itself maps to application models without having to write boilerplate code two times.","title":"Key Strengths:"},{"location":"database/#database-schema","text":"","title":"Database Schema"},{"location":"database/#employees-departments","text":"","title":"Employees &amp; Departments"},{"location":"database/#employee","text":"The central model representing workers in the organization. Attributes : Basic identification, contact, and employment details (e.g. HireDate , Salary , Commission , Photo ). Relationships : MemberOf : Links an employee to their department. Head : One employee may head a department. Job : Each employee is assigned an Occupation . EmployeeRole : Permissions or access level abstraction. Credentials : One-to-one mapping to EmployeeLogin . HomeAddress : Optional residential link. Indexes on EmployeeNumber , Firstname , and Surname help fast retrieval by key identity or name.","title":"Employee"},{"location":"database/#department","text":"Organizational unit with: A list of Members (employees). An optional DepartmentHead (employee). Indexed by a unique DepartmentNumber .","title":"Department"},{"location":"database/#authentication-access-control","text":"","title":"Authentication &amp; Access Control"},{"location":"database/#employeelogin","text":"Credentials stored separately with: Username (unique), Password , and LastLogin . Inverse relationship to a single Employee .","title":"EmployeeLogin"},{"location":"database/#role","text":"Represents the permission level or functional group in the system. Roles have names, optional descriptions, and AccessLevel . Connected to many employees.","title":"Role"},{"location":"database/#jobs-and-occupations","text":"","title":"Jobs and Occupations"},{"location":"database/#occupation","text":"Job titles or duties \u2014 e.g., \"Technician\", \"Salesperson\". Related to multiple employees. Indexed by Name for fast role-based lookups.","title":"Occupation"},{"location":"database/#clients-addresses","text":"","title":"Clients &amp; Addresses"},{"location":"database/#client","text":"Represents a customer: Contact info ( Email , Mobile ) and metadata ( RegistrationDate , DateOfBirth ). Linked to: ClientCard : optional loyalty card. ClientAddress : optional home address. Indexed on ClientId and full name.","title":"Client"},{"location":"database/#address","text":"Shared address entity used by both clients and employees: Standard address fields with optional State . Two relationships: EmployeeResidents ClientResidents","title":"Address"},{"location":"database/#loyalty-cards","text":"","title":"Loyalty Cards"},{"location":"database/#clientcard","text":"Optional card associated with a client: Attributes like Points , Status , ExpiryDate , and CardImage . Linked to exactly one CardHolder ( Client ).","title":"ClientCard"},{"location":"database/#products-and-categories","text":"","title":"Products and Categories"},{"location":"database/#category","text":"Used to classify Products . Each has: A Name and Description . Linked to multiple products. Indexed by Name .","title":"Category"},{"location":"database/#product","text":"Represents a purchasable item in the system: Attributes for physical characteristics ( Weight , Dimensions , EnergyConsumption , etc.). Metadata ( Colours , Description , ReleaseDate , Images ). Belongs to a Category . Indexed on: Reference (primary key) Combination of Brand and Name .","title":"Product"},{"location":"database/#specialized-product-television","text":"Inherits from Product , and adds: ScreenSize , Technology , RefreshRate Smart features: SmartTv , OperatingSystem , RemoteControl Inputs: NumberOfHdmi , NumberOfUsb , HeadphoneJack Audio/video capabilities like Hdr , AudioTechnology This inheritance allows reusing common product properties while enriching them with television-specific attributes.","title":"Specialized Product: Television"},{"location":"inventory/","text":"Inventory (Swing) Application","title":"Inventory"},{"location":"inventory/#inventory-swing-application","text":"","title":"Inventory (Swing) Application"},{"location":"pos/","text":"Point-Of-Sale (WinUi) Application","title":"POS"},{"location":"pos/#point-of-sale-winui-application","text":"","title":"Point-Of-Sale (WinUi) Application"},{"location":"web/","text":"Web App","title":"Web App"},{"location":"web/#web-app","text":"","title":"Web App"}]}