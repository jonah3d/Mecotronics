/*
 * Address.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Tue Jun 24 21:54:41 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Address</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Address extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Tue Jun 24 21:54:41 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Address</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Address"));

    /**
     * Gets the <code>Address</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Address(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Address(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Address.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Address.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Address.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Address.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'DirecctionOne' */

    /** Attribute <code>DirecctionOne</code> cache ID */
    private static int direcctionOneCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DirecctionOne",CID));

    /**
     * Gets the <code>DirecctionOne</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDirecctionOneAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(direcctionOneCID);
    }


    /**
     * Gets the <code>DirecctionOne</code> attribute value.
     * @return the value
     *
     * @see #setDirecctionOne
     * @see #removeDirecctionOne
     */
    public final String getDirecctionOne() {
        return getString(getDirecctionOneAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DirecctionOne</code> attribute value.
     * @param val the new value
     *
     * @see #getDirecctionOne
     * @see #removeDirecctionOne
     */
    public final void setDirecctionOne(String val) {
        setString(getDirecctionOneAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DirecctionOne</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDirecctionOne
     * @see #setDirecctionOne
     */
    public final void removeDirecctionOne() {
        removeValue(getDirecctionOneAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDirecctionOne
     * @see #setDirecctionOne
     */
    public final boolean isDirecctionOneDefaultValue() {
        return isDefaultValue(getDirecctionOneAttribute(getMtDatabase()));
    }


    /* Attribute 'DirecctionTwo' */

    /** Attribute <code>DirecctionTwo</code> cache ID */
    private static int direcctionTwoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DirecctionTwo",CID));

    /**
     * Gets the <code>DirecctionTwo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDirecctionTwoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(direcctionTwoCID);
    }


    /**
     * Gets the <code>DirecctionTwo</code> attribute value.
     * @return the value
     *
     * @see #setDirecctionTwo
     * @see #removeDirecctionTwo
     */
    public final String getDirecctionTwo() {
        return getString(getDirecctionTwoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DirecctionTwo</code> attribute value.
     * @param val the new value
     *
     * @see #getDirecctionTwo
     * @see #removeDirecctionTwo
     */
    public final void setDirecctionTwo(String val) {
        setString(getDirecctionTwoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DirecctionTwo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDirecctionTwo
     * @see #setDirecctionTwo
     */
    public final void removeDirecctionTwo() {
        removeValue(getDirecctionTwoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDirecctionTwo
     * @see #setDirecctionTwo
     */
    public final boolean isDirecctionTwoDefaultValue() {
        return isDefaultValue(getDirecctionTwoAttribute(getMtDatabase()));
    }


    /* Attribute 'City' */

    /** Attribute <code>City</code> cache ID */
    private static int cityCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("City",CID));

    /**
     * Gets the <code>City</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCityAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(cityCID);
    }


    /**
     * Gets the <code>City</code> attribute value.
     * @return the value
     *
     * @see #setCity
     * @see #removeCity
     */
    public final String getCity() {
        return getString(getCityAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>City</code> attribute value.
     * @param val the new value
     *
     * @see #getCity
     * @see #removeCity
     */
    public final void setCity(String val) {
        setString(getCityAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>City</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCity
     * @see #setCity
     */
    public final void removeCity() {
        removeValue(getCityAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCity
     * @see #setCity
     */
    public final boolean isCityDefaultValue() {
        return isDefaultValue(getCityAttribute(getMtDatabase()));
    }


    /* Attribute 'PostalCode' */

    /** Attribute <code>PostalCode</code> cache ID */
    private static int postalCodeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("PostalCode",CID));

    /**
     * Gets the <code>PostalCode</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPostalCodeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(postalCodeCID);
    }


    /**
     * Gets the <code>PostalCode</code> attribute value.
     * @return the value
     *
     * @see #setPostalCode
     * @see #removePostalCode
     */
    public final String getPostalCode() {
        return getString(getPostalCodeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>PostalCode</code> attribute value.
     * @param val the new value
     *
     * @see #getPostalCode
     * @see #removePostalCode
     */
    public final void setPostalCode(String val) {
        setString(getPostalCodeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>PostalCode</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPostalCode
     * @see #setPostalCode
     */
    public final void removePostalCode() {
        removeValue(getPostalCodeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPostalCode
     * @see #setPostalCode
     */
    public final boolean isPostalCodeDefaultValue() {
        return isDefaultValue(getPostalCodeAttribute(getMtDatabase()));
    }


    /* Attribute 'State' */

    /** Attribute <code>State</code> cache ID */
    private static int stateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("State",CID));

    /**
     * Gets the <code>State</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(stateCID);
    }


    /**
     * Gets the <code>State</code> attribute value.
     * @return the value
     *
     * @see #setState
     * @see #removeState
     */
    public final String getState() {
        return getString(getStateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>State</code> attribute value.
     * @param val the new value
     *
     * @see #getState
     * @see #removeState
     */
    public final void setState(String val) {
        setString(getStateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>State</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getState
     * @see #setState
     */
    public final void removeState() {
        removeValue(getStateAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getState
     * @see #setState
     */
    public final boolean isStateNull() {
        return isNull(getStateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getState
     * @see #setState
     */
    public final boolean isStateDefaultValue() {
        return isDefaultValue(getStateAttribute(getMtDatabase()));
    }


    /* Attribute 'Country' */

    /** Attribute <code>Country</code> cache ID */
    private static int countryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Country",CID));

    /**
     * Gets the <code>Country</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCountryAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(countryCID);
    }


    /**
     * Gets the <code>Country</code> attribute value.
     * @return the value
     *
     * @see #setCountry
     * @see #removeCountry
     */
    public final String getCountry() {
        return getString(getCountryAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Country</code> attribute value.
     * @param val the new value
     *
     * @see #getCountry
     * @see #removeCountry
     */
    public final void setCountry(String val) {
        setString(getCountryAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Country</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCountry
     * @see #setCountry
     */
    public final void removeCountry() {
        removeValue(getCountryAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCountry
     * @see #setCountry
     */
    public final boolean isCountryDefaultValue() {
        return isDefaultValue(getCountryAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'EmployeeResidents' */

    /** Relationship <code>EmployeeResidents</code> cache ID */
    private static int employeeResidentsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("EmployeeResidents",CID));

    /**
     * Gets the <code>EmployeeResidents</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getEmployeeResidentsRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(employeeResidentsCID);
    }

    /**
     * Gets the <code>EmployeeResidents</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     * @see #setEmployeeResidents
     * @see #removeEmployeeResidents
     */
    public final com.joe.models.Employee[] getEmployeeResidents() {
        return (com.joe.models.Employee[])getSuccessors(getEmployeeResidentsRelationship(getMtDatabase()), com.joe.models.Employee.class);
    }

    /**
     * Counts the <code>EmployeeResidents</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getEmployeeResidents
     * @see #employeeResidentsIterator
     * @see #setEmployeeResidents
     * @see #removeEmployeeResidents
     */
    public final int getEmployeeResidentsSize() {
        return getSuccessorSize(getEmployeeResidentsRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>EmployeeResidents</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #setEmployeeResidents
     * @see #removeEmployeeResidents
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> employeeResidentsIterator() {
        return this.<E>successorIterator(getEmployeeResidentsRelationship(getMtDatabase()), com.joe.models.Employee.class);
    }

    /**
     * Sets the <code>EmployeeResidents</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     * @see #removeEmployeeResidents
     */
    public final void setEmployeeResidents(com.joe.models.Employee[] succs) {
        setSuccessors(getEmployeeResidentsRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>EmployeeResidents</code> successors list.
     * @param succ the object to add
     *
     * @see #getEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     * @see #setEmployeeResidents
     * @see #removeEmployeeResidents
     */
    public final void prependEmployeeResidents(com.joe.models.Employee succ) {
        prependSuccessor(getEmployeeResidentsRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>EmployeeResidents</code> successors list.
     * @param succ the object to add
     *
     * @see #getEmployeeResidents
     * @see #setEmployeeResidents
     * @see #removeEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     */
    public final void appendEmployeeResidents(com.joe.models.Employee succ) {
        appendSuccessor(getEmployeeResidentsRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>EmployeeResidents</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getEmployeeResidents
     * @see #setEmployeeResidents
     * @see #removeEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     */
    public final void appendEmployeeResidents(com.joe.models.Employee[] succs) {
        addSuccessors(getEmployeeResidentsRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>EmployeeResidents</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getEmployeeResidents
     * @see #setEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     */
    public void removeEmployeeResidents(com.joe.models.Employee[] succs) {
        removeSuccessors(getEmployeeResidentsRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>EmployeeResidents</code> successors list.
     * @param succ the object to remove
     *
     * @see #getEmployeeResidents
     * @see #setEmployeeResidents
     * @see #getEmployeeResidentsSize
     * @see #employeeResidentsIterator
     */
    public void removeEmployeeResidents(com.joe.models.Employee succ) {
        removeSuccessor(getEmployeeResidentsRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>EmployeeResidents</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearEmployeeResidents() {
        clearSuccessors(getEmployeeResidentsRelationship(getMtDatabase()));
    }


    /* Relationship 'ClientResidents' */

    /** Relationship <code>ClientResidents</code> cache ID */
    private static int clientResidentsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("ClientResidents",CID));

    /**
     * Gets the <code>ClientResidents</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getClientResidentsRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(clientResidentsCID);
    }

    /**
     * Gets the <code>ClientResidents</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     * @see #setClientResidents
     * @see #removeClientResidents
     */
    public final com.joe.models.Client[] getClientResidents() {
        return (com.joe.models.Client[])getSuccessors(getClientResidentsRelationship(getMtDatabase()), com.joe.models.Client.class);
    }

    /**
     * Counts the <code>ClientResidents</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getClientResidents
     * @see #clientResidentsIterator
     * @see #setClientResidents
     * @see #removeClientResidents
     */
    public final int getClientResidentsSize() {
        return getSuccessorSize(getClientResidentsRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>ClientResidents</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getClientResidents
     * @see #getClientResidentsSize
     * @see #setClientResidents
     * @see #removeClientResidents
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> clientResidentsIterator() {
        return this.<E>successorIterator(getClientResidentsRelationship(getMtDatabase()), com.joe.models.Client.class);
    }

    /**
     * Sets the <code>ClientResidents</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getClientResidents
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     * @see #removeClientResidents
     */
    public final void setClientResidents(com.joe.models.Client[] succs) {
        setSuccessors(getClientResidentsRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>ClientResidents</code> successors list.
     * @param succ the object to add
     *
     * @see #getClientResidents
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     * @see #setClientResidents
     * @see #removeClientResidents
     */
    public final void prependClientResidents(com.joe.models.Client succ) {
        prependSuccessor(getClientResidentsRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>ClientResidents</code> successors list.
     * @param succ the object to add
     *
     * @see #getClientResidents
     * @see #setClientResidents
     * @see #removeClientResidents
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     */
    public final void appendClientResidents(com.joe.models.Client succ) {
        appendSuccessor(getClientResidentsRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>ClientResidents</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getClientResidents
     * @see #setClientResidents
     * @see #removeClientResidents
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     */
    public final void appendClientResidents(com.joe.models.Client[] succs) {
        addSuccessors(getClientResidentsRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>ClientResidents</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getClientResidents
     * @see #setClientResidents
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     */
    public void removeClientResidents(com.joe.models.Client[] succs) {
        removeSuccessors(getClientResidentsRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>ClientResidents</code> successors list.
     * @param succ the object to remove
     *
     * @see #getClientResidents
     * @see #setClientResidents
     * @see #getClientResidentsSize
     * @see #clientResidentsIterator
     */
    public void removeClientResidents(com.joe.models.Client succ) {
        removeSuccessor(getClientResidentsRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>ClientResidents</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearClientResidents() {
        clearSuccessors(getClientResidentsRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Address(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Address]";
    }
}
