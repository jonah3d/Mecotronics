/*
 * Occupation.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Tue Jun 24 21:54:41 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Occupation</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Occupation extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Tue Jun 24 21:54:41 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Occupation</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Occupation"));

    /**
     * Gets the <code>Occupation</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Occupation(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Occupation(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Occupation.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Occupation.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Occupation.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Occupation.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'Name' */

    /** Attribute <code>Name</code> cache ID */
    private static int nameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Name",CID));

    /**
     * Gets the <code>Name</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nameCID);
    }


    /**
     * Gets the <code>Name</code> attribute value.
     * @return the value
     *
     * @see #setName
     * @see #removeName
     */
    public final String getName() {
        return getString(getNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Name</code> attribute value.
     * @param val the new value
     *
     * @see #getName
     * @see #removeName
     */
    public final void setName(String val) {
        setString(getNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Name</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getName
     * @see #setName
     */
    public final void removeName() {
        removeValue(getNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getName
     * @see #setName
     */
    public final boolean isNameDefaultValue() {
        return isDefaultValue(getNameAttribute(getMtDatabase()));
    }


    /* Attribute 'Description' */

    /** Attribute <code>Description</code> cache ID */
    private static int descriptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Description",CID));

    /**
     * Gets the <code>Description</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDescriptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(descriptionCID);
    }


    /**
     * Gets the <code>Description</code> attribute value.
     * @return the value
     *
     * @see #setDescription
     * @see #removeDescription
     */
    public final String getDescription() {
        return getString(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Description</code> attribute value.
     * @param val the new value
     *
     * @see #getDescription
     * @see #removeDescription
     */
    public final void setDescription(String val) {
        setString(getDescriptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Description</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final void removeDescription() {
        removeValue(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionNull() {
        return isNull(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionDefaultValue() {
        return isDefaultValue(getDescriptionAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'Employees' */

    /** Relationship <code>Employees</code> cache ID */
    private static int employeesCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("Employees",CID));

    /**
     * Gets the <code>Employees</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getEmployeesRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(employeesCID);
    }

    /**
     * Gets the <code>Employees</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getEmployeesSize
     * @see #employeesIterator
     * @see #setEmployees
     * @see #removeEmployees
     */
    public final com.joe.models.Employee[] getEmployees() {
        return (com.joe.models.Employee[])getSuccessors(getEmployeesRelationship(getMtDatabase()), com.joe.models.Employee.class);
    }

    /**
     * Counts the <code>Employees</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getEmployees
     * @see #employeesIterator
     * @see #setEmployees
     * @see #removeEmployees
     */
    public final int getEmployeesSize() {
        return getSuccessorSize(getEmployeesRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>Employees</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getEmployees
     * @see #getEmployeesSize
     * @see #setEmployees
     * @see #removeEmployees
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> employeesIterator() {
        return this.<E>successorIterator(getEmployeesRelationship(getMtDatabase()), com.joe.models.Employee.class);
    }

    /**
     * Sets the <code>Employees</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getEmployees
     * @see #getEmployeesSize
     * @see #employeesIterator
     * @see #removeEmployees
     */
    public final void setEmployees(com.joe.models.Employee[] succs) {
        setSuccessors(getEmployeesRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>Employees</code> successors list.
     * @param succ the object to add
     *
     * @see #getEmployees
     * @see #getEmployeesSize
     * @see #employeesIterator
     * @see #setEmployees
     * @see #removeEmployees
     */
    public final void prependEmployees(com.joe.models.Employee succ) {
        prependSuccessor(getEmployeesRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>Employees</code> successors list.
     * @param succ the object to add
     *
     * @see #getEmployees
     * @see #setEmployees
     * @see #removeEmployees
     * @see #getEmployeesSize
     * @see #employeesIterator
     */
    public final void appendEmployees(com.joe.models.Employee succ) {
        appendSuccessor(getEmployeesRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>Employees</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getEmployees
     * @see #setEmployees
     * @see #removeEmployees
     * @see #getEmployeesSize
     * @see #employeesIterator
     */
    public final void appendEmployees(com.joe.models.Employee[] succs) {
        addSuccessors(getEmployeesRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>Employees</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getEmployees
     * @see #setEmployees
     * @see #getEmployeesSize
     * @see #employeesIterator
     */
    public void removeEmployees(com.joe.models.Employee[] succs) {
        removeSuccessors(getEmployeesRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>Employees</code> successors list.
     * @param succ the object to remove
     *
     * @see #getEmployees
     * @see #setEmployees
     * @see #getEmployeesSize
     * @see #employeesIterator
     */
    public void removeEmployees(com.joe.models.Employee succ) {
        removeSuccessor(getEmployeesRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>Employees</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearEmployees() {
        clearSuccessors(getEmployeesRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Occupation(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Occupation]";
    }
}
