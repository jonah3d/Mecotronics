/*
 * Television.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Tue Jun 24 21:54:41 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Television</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Television extends com.joe.models.Product {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Tue Jun 24 21:54:41 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Television</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Television"));

    /**
     * Gets the <code>Television</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Television(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Television(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Television.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Television.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Television.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Television.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'ScreenSize' */

    /** Attribute <code>ScreenSize</code> cache ID */
    private static int screenSizeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ScreenSize",CID));

    /**
     * Gets the <code>ScreenSize</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getScreenSizeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(screenSizeCID);
    }


    /**
     * Gets the <code>ScreenSize</code> attribute value.
     * @return the value
     *
     * @see #setScreenSize
     * @see #removeScreenSize
     */
    public final int getScreenSize() {
        return getInteger(getScreenSizeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ScreenSize</code> attribute value.
     * @param val the new value
     *
     * @see #getScreenSize
     * @see #removeScreenSize
     */
    public final void setScreenSize(int val) {
        setInteger(getScreenSizeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ScreenSize</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getScreenSize
     * @see #setScreenSize
     */
    public final void removeScreenSize() {
        removeValue(getScreenSizeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getScreenSize
     * @see #setScreenSize
     */
    public final boolean isScreenSizeDefaultValue() {
        return isDefaultValue(getScreenSizeAttribute(getMtDatabase()));
    }


    /* Attribute 'Technology' */

    /** Attribute <code>Technology</code> cache ID */
    private static int technologyCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Technology",CID));

    /**
     * Gets the <code>Technology</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTechnologyAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(technologyCID);
    }


    /**
     * Gets the <code>Technology</code> attribute value.
     * @return the value
     *
     * @see #setTechnology
     * @see #removeTechnology
     */
    public final String getTechnology() {
        return getString(getTechnologyAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Technology</code> attribute value.
     * @param val the new value
     *
     * @see #getTechnology
     * @see #removeTechnology
     */
    public final void setTechnology(String val) {
        setString(getTechnologyAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Technology</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTechnology
     * @see #setTechnology
     */
    public final void removeTechnology() {
        removeValue(getTechnologyAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getTechnology
     * @see #setTechnology
     */
    public final boolean isTechnologyNull() {
        return isNull(getTechnologyAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTechnology
     * @see #setTechnology
     */
    public final boolean isTechnologyDefaultValue() {
        return isDefaultValue(getTechnologyAttribute(getMtDatabase()));
    }


    /* Attribute 'RefreshRate' */

    /** Attribute <code>RefreshRate</code> cache ID */
    private static int refreshRateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("RefreshRate",CID));

    /**
     * Gets the <code>RefreshRate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getRefreshRateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(refreshRateCID);
    }


    /**
     * Gets the <code>RefreshRate</code> attribute value.
     * @return the value
     *
     * @see #setRefreshRate
     * @see #removeRefreshRate
     */
    public final int getRefreshRate() {
        return getInteger(getRefreshRateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>RefreshRate</code> attribute value.
     * @param val the new value
     *
     * @see #getRefreshRate
     * @see #removeRefreshRate
     */
    public final void setRefreshRate(int val) {
        setInteger(getRefreshRateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>RefreshRate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getRefreshRate
     * @see #setRefreshRate
     */
    public final void removeRefreshRate() {
        removeValue(getRefreshRateAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getRefreshRate
     * @see #setRefreshRate
     */
    public final boolean isRefreshRateNull() {
        return isNull(getRefreshRateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getRefreshRate
     * @see #setRefreshRate
     */
    public final boolean isRefreshRateDefaultValue() {
        return isDefaultValue(getRefreshRateAttribute(getMtDatabase()));
    }


    /* Attribute 'Hdr' */

    /** Attribute <code>Hdr</code> cache ID */
    private static int hdrCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Hdr",CID));

    /**
     * Gets the <code>Hdr</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getHdrAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(hdrCID);
    }


    /**
     * Gets the <code>Hdr</code> attribute value.
     * @return the value
     *
     * @see #setHdr
     * @see #removeHdr
     */
    public final boolean getHdr() {
        return getBoolean(getHdrAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Hdr</code> attribute value.
     * @param val the new value
     *
     * @see #getHdr
     * @see #removeHdr
     */
    public final void setHdr(boolean val) {
        setBoolean(getHdrAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Hdr</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getHdr
     * @see #setHdr
     */
    public final void removeHdr() {
        removeValue(getHdrAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getHdr
     * @see #setHdr
     */
    public final boolean isHdrDefaultValue() {
        return isDefaultValue(getHdrAttribute(getMtDatabase()));
    }


    /* Attribute 'IntegratedSpeakers' */

    /** Attribute <code>IntegratedSpeakers</code> cache ID */
    private static int integratedSpeakersCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("IntegratedSpeakers",CID));

    /**
     * Gets the <code>IntegratedSpeakers</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIntegratedSpeakersAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(integratedSpeakersCID);
    }


    /**
     * Gets the <code>IntegratedSpeakers</code> attribute value.
     * @return the value
     *
     * @see #setIntegratedSpeakers
     * @see #removeIntegratedSpeakers
     */
    public final boolean getIntegratedSpeakers() {
        return getBoolean(getIntegratedSpeakersAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>IntegratedSpeakers</code> attribute value.
     * @param val the new value
     *
     * @see #getIntegratedSpeakers
     * @see #removeIntegratedSpeakers
     */
    public final void setIntegratedSpeakers(boolean val) {
        setBoolean(getIntegratedSpeakersAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>IntegratedSpeakers</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getIntegratedSpeakers
     * @see #setIntegratedSpeakers
     */
    public final void removeIntegratedSpeakers() {
        removeValue(getIntegratedSpeakersAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getIntegratedSpeakers
     * @see #setIntegratedSpeakers
     */
    public final boolean isIntegratedSpeakersDefaultValue() {
        return isDefaultValue(getIntegratedSpeakersAttribute(getMtDatabase()));
    }


    /* Attribute 'HeadphoneJack' */

    /** Attribute <code>HeadphoneJack</code> cache ID */
    private static int headphoneJackCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("HeadphoneJack",CID));

    /**
     * Gets the <code>HeadphoneJack</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getHeadphoneJackAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(headphoneJackCID);
    }


    /**
     * Gets the <code>HeadphoneJack</code> attribute value.
     * @return the value
     *
     * @see #setHeadphoneJack
     * @see #removeHeadphoneJack
     */
    public final boolean getHeadphoneJack() {
        return getBoolean(getHeadphoneJackAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>HeadphoneJack</code> attribute value.
     * @param val the new value
     *
     * @see #getHeadphoneJack
     * @see #removeHeadphoneJack
     */
    public final void setHeadphoneJack(boolean val) {
        setBoolean(getHeadphoneJackAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>HeadphoneJack</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getHeadphoneJack
     * @see #setHeadphoneJack
     */
    public final void removeHeadphoneJack() {
        removeValue(getHeadphoneJackAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getHeadphoneJack
     * @see #setHeadphoneJack
     */
    public final boolean isHeadphoneJackDefaultValue() {
        return isDefaultValue(getHeadphoneJackAttribute(getMtDatabase()));
    }


    /* Attribute 'SmartTv' */

    /** Attribute <code>SmartTv</code> cache ID */
    private static int smartTvCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SmartTv",CID));

    /**
     * Gets the <code>SmartTv</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSmartTvAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(smartTvCID);
    }


    /**
     * Gets the <code>SmartTv</code> attribute value.
     * @return the value
     *
     * @see #setSmartTv
     * @see #removeSmartTv
     */
    public final boolean getSmartTv() {
        return getBoolean(getSmartTvAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SmartTv</code> attribute value.
     * @param val the new value
     *
     * @see #getSmartTv
     * @see #removeSmartTv
     */
    public final void setSmartTv(boolean val) {
        setBoolean(getSmartTvAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SmartTv</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSmartTv
     * @see #setSmartTv
     */
    public final void removeSmartTv() {
        removeValue(getSmartTvAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSmartTv
     * @see #setSmartTv
     */
    public final boolean isSmartTvDefaultValue() {
        return isDefaultValue(getSmartTvAttribute(getMtDatabase()));
    }


    /* Attribute 'OperatingSystem' */

    /** Attribute <code>OperatingSystem</code> cache ID */
    private static int operatingSystemCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("OperatingSystem",CID));

    /**
     * Gets the <code>OperatingSystem</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getOperatingSystemAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(operatingSystemCID);
    }


    /**
     * Gets the <code>OperatingSystem</code> attribute value.
     * @return the value
     *
     * @see #setOperatingSystem
     * @see #removeOperatingSystem
     */
    public final String getOperatingSystem() {
        return getString(getOperatingSystemAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>OperatingSystem</code> attribute value.
     * @param val the new value
     *
     * @see #getOperatingSystem
     * @see #removeOperatingSystem
     */
    public final void setOperatingSystem(String val) {
        setString(getOperatingSystemAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>OperatingSystem</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getOperatingSystem
     * @see #setOperatingSystem
     */
    public final void removeOperatingSystem() {
        removeValue(getOperatingSystemAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getOperatingSystem
     * @see #setOperatingSystem
     */
    public final boolean isOperatingSystemDefaultValue() {
        return isDefaultValue(getOperatingSystemAttribute(getMtDatabase()));
    }


    /* Attribute 'RemoteControl' */

    /** Attribute <code>RemoteControl</code> cache ID */
    private static int remoteControlCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("RemoteControl",CID));

    /**
     * Gets the <code>RemoteControl</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getRemoteControlAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(remoteControlCID);
    }


    /**
     * Gets the <code>RemoteControl</code> attribute value.
     * @return the value
     *
     * @see #setRemoteControl
     * @see #removeRemoteControl
     */
    public final boolean getRemoteControl() {
        return getBoolean(getRemoteControlAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>RemoteControl</code> attribute value.
     * @param val the new value
     *
     * @see #getRemoteControl
     * @see #removeRemoteControl
     */
    public final void setRemoteControl(boolean val) {
        setBoolean(getRemoteControlAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>RemoteControl</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getRemoteControl
     * @see #setRemoteControl
     */
    public final void removeRemoteControl() {
        removeValue(getRemoteControlAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getRemoteControl
     * @see #setRemoteControl
     */
    public final boolean isRemoteControlDefaultValue() {
        return isDefaultValue(getRemoteControlAttribute(getMtDatabase()));
    }


    /* Attribute 'Resolution' */

    /** Attribute <code>Resolution</code> cache ID */
    private static int resolutionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Resolution",CID));

    /**
     * Gets the <code>Resolution</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getResolutionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(resolutionCID);
    }


    /**
     * Gets the <code>Resolution</code> attribute value.
     * @return the value
     *
     * @see #setResolution
     * @see #removeResolution
     */
    public final String getResolution() {
        return getString(getResolutionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Resolution</code> attribute value.
     * @param val the new value
     *
     * @see #getResolution
     * @see #removeResolution
     */
    public final void setResolution(String val) {
        setString(getResolutionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Resolution</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getResolution
     * @see #setResolution
     */
    public final void removeResolution() {
        removeValue(getResolutionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getResolution
     * @see #setResolution
     */
    public final boolean isResolutionNull() {
        return isNull(getResolutionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getResolution
     * @see #setResolution
     */
    public final boolean isResolutionDefaultValue() {
        return isDefaultValue(getResolutionAttribute(getMtDatabase()));
    }


    /* Attribute 'NumberOfHdmi' */

    /** Attribute <code>NumberOfHdmi</code> cache ID */
    private static int numberOfHdmiCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("NumberOfHdmi",CID));

    /**
     * Gets the <code>NumberOfHdmi</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNumberOfHdmiAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(numberOfHdmiCID);
    }


    /**
     * Gets the <code>NumberOfHdmi</code> attribute value.
     * @return the value
     *
     * @see #setNumberOfHdmi
     * @see #removeNumberOfHdmi
     */
    public final int getNumberOfHdmi() {
        return getInteger(getNumberOfHdmiAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>NumberOfHdmi</code> attribute value.
     * @param val the new value
     *
     * @see #getNumberOfHdmi
     * @see #removeNumberOfHdmi
     */
    public final void setNumberOfHdmi(int val) {
        setInteger(getNumberOfHdmiAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>NumberOfHdmi</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNumberOfHdmi
     * @see #setNumberOfHdmi
     */
    public final void removeNumberOfHdmi() {
        removeValue(getNumberOfHdmiAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNumberOfHdmi
     * @see #setNumberOfHdmi
     */
    public final boolean isNumberOfHdmiNull() {
        return isNull(getNumberOfHdmiAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNumberOfHdmi
     * @see #setNumberOfHdmi
     */
    public final boolean isNumberOfHdmiDefaultValue() {
        return isDefaultValue(getNumberOfHdmiAttribute(getMtDatabase()));
    }


    /* Attribute 'NumberOfUsb' */

    /** Attribute <code>NumberOfUsb</code> cache ID */
    private static int numberOfUsbCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("NumberOfUsb",CID));

    /**
     * Gets the <code>NumberOfUsb</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNumberOfUsbAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(numberOfUsbCID);
    }


    /**
     * Gets the <code>NumberOfUsb</code> attribute value.
     * @return the value
     *
     * @see #setNumberOfUsb
     * @see #removeNumberOfUsb
     */
    public final int getNumberOfUsb() {
        return getInteger(getNumberOfUsbAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>NumberOfUsb</code> attribute value.
     * @param val the new value
     *
     * @see #getNumberOfUsb
     * @see #removeNumberOfUsb
     */
    public final void setNumberOfUsb(int val) {
        setInteger(getNumberOfUsbAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>NumberOfUsb</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNumberOfUsb
     * @see #setNumberOfUsb
     */
    public final void removeNumberOfUsb() {
        removeValue(getNumberOfUsbAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNumberOfUsb
     * @see #setNumberOfUsb
     */
    public final boolean isNumberOfUsbNull() {
        return isNull(getNumberOfUsbAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNumberOfUsb
     * @see #setNumberOfUsb
     */
    public final boolean isNumberOfUsbDefaultValue() {
        return isDefaultValue(getNumberOfUsbAttribute(getMtDatabase()));
    }


    /* Attribute 'AudioTechnology' */

    /** Attribute <code>AudioTechnology</code> cache ID */
    private static int audioTechnologyCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AudioTechnology",CID));

    /**
     * Gets the <code>AudioTechnology</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAudioTechnologyAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(audioTechnologyCID);
    }


    /**
     * Gets the <code>AudioTechnology</code> attribute value.
     * @return the value
     *
     * @see #setAudioTechnology
     * @see #removeAudioTechnology
     */
    public final String getAudioTechnology() {
        return getString(getAudioTechnologyAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AudioTechnology</code> attribute value.
     * @param val the new value
     *
     * @see #getAudioTechnology
     * @see #removeAudioTechnology
     */
    public final void setAudioTechnology(String val) {
        setString(getAudioTechnologyAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AudioTechnology</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAudioTechnology
     * @see #setAudioTechnology
     */
    public final void removeAudioTechnology() {
        removeValue(getAudioTechnologyAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAudioTechnology
     * @see #setAudioTechnology
     */
    public final boolean isAudioTechnologyNull() {
        return isNull(getAudioTechnologyAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAudioTechnology
     * @see #setAudioTechnology
     */
    public final boolean isAudioTechnologyDefaultValue() {
        return isDefaultValue(getAudioTechnologyAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Television(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Television]";
    }
}
