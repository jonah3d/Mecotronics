/*
 * Client.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Tue Jun 24 21:54:41 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Client</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Client extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Tue Jun 24 21:54:41 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Client</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Client"));

    /**
     * Gets the <code>Client</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Client(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Client(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Client.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Client.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Client.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Client.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'ClientId' */

    /** Attribute <code>ClientId</code> cache ID */
    private static int clientIdCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ClientId",CID));

    /**
     * Gets the <code>ClientId</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getClientIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(clientIdCID);
    }


    /**
     * Gets the <code>ClientId</code> attribute value.
     * @return the value
     *
     * @see #setClientId
     * @see #removeClientId
     */
    public final String getClientId() {
        return getString(getClientIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ClientId</code> attribute value.
     * @param val the new value
     *
     * @see #getClientId
     * @see #removeClientId
     */
    public final void setClientId(String val) {
        setString(getClientIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ClientId</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getClientId
     * @see #setClientId
     */
    public final void removeClientId() {
        removeValue(getClientIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getClientId
     * @see #setClientId
     */
    public final boolean isClientIdDefaultValue() {
        return isDefaultValue(getClientIdAttribute(getMtDatabase()));
    }


    /* Attribute 'Firstname' */

    /** Attribute <code>Firstname</code> cache ID */
    private static int firstnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Firstname",CID));

    /**
     * Gets the <code>Firstname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getFirstnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(firstnameCID);
    }


    /**
     * Gets the <code>Firstname</code> attribute value.
     * @return the value
     *
     * @see #setFirstname
     * @see #removeFirstname
     */
    public final String getFirstname() {
        return getString(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Firstname</code> attribute value.
     * @param val the new value
     *
     * @see #getFirstname
     * @see #removeFirstname
     */
    public final void setFirstname(String val) {
        setString(getFirstnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Firstname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final void removeFirstname() {
        removeValue(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final boolean isFirstnameDefaultValue() {
        return isDefaultValue(getFirstnameAttribute(getMtDatabase()));
    }


    /* Attribute 'Surname' */

    /** Attribute <code>Surname</code> cache ID */
    private static int surnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Surname",CID));

    /**
     * Gets the <code>Surname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSurnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(surnameCID);
    }


    /**
     * Gets the <code>Surname</code> attribute value.
     * @return the value
     *
     * @see #setSurname
     * @see #removeSurname
     */
    public final String getSurname() {
        return getString(getSurnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Surname</code> attribute value.
     * @param val the new value
     *
     * @see #getSurname
     * @see #removeSurname
     */
    public final void setSurname(String val) {
        setString(getSurnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Surname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSurname
     * @see #setSurname
     */
    public final void removeSurname() {
        removeValue(getSurnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSurname
     * @see #setSurname
     */
    public final boolean isSurnameDefaultValue() {
        return isDefaultValue(getSurnameAttribute(getMtDatabase()));
    }


    /* Attribute 'Mobile' */

    /** Attribute <code>Mobile</code> cache ID */
    private static int mobileCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Mobile",CID));

    /**
     * Gets the <code>Mobile</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMobileAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(mobileCID);
    }


    /**
     * Gets the <code>Mobile</code> attribute value.
     * @return the value
     *
     * @see #setMobile
     * @see #removeMobile
     */
    public final String getMobile() {
        return getString(getMobileAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Mobile</code> attribute value.
     * @param val the new value
     *
     * @see #getMobile
     * @see #removeMobile
     */
    public final void setMobile(String val) {
        setString(getMobileAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Mobile</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMobile
     * @see #setMobile
     */
    public final void removeMobile() {
        removeValue(getMobileAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getMobile
     * @see #setMobile
     */
    public final boolean isMobileNull() {
        return isNull(getMobileAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMobile
     * @see #setMobile
     */
    public final boolean isMobileDefaultValue() {
        return isDefaultValue(getMobileAttribute(getMtDatabase()));
    }


    /* Attribute 'Email' */

    /** Attribute <code>Email</code> cache ID */
    private static int emailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Email",CID));

    /**
     * Gets the <code>Email</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEmailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(emailCID);
    }


    /**
     * Gets the <code>Email</code> attribute value.
     * @return the value
     *
     * @see #setEmail
     * @see #removeEmail
     */
    public final String getEmail() {
        return getString(getEmailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Email</code> attribute value.
     * @param val the new value
     *
     * @see #getEmail
     * @see #removeEmail
     */
    public final void setEmail(String val) {
        setString(getEmailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Email</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEmail
     * @see #setEmail
     */
    public final void removeEmail() {
        removeValue(getEmailAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getEmail
     * @see #setEmail
     */
    public final boolean isEmailNull() {
        return isNull(getEmailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEmail
     * @see #setEmail
     */
    public final boolean isEmailDefaultValue() {
        return isDefaultValue(getEmailAttribute(getMtDatabase()));
    }


    /* Attribute 'DateOfBirth' */

    /** Attribute <code>DateOfBirth</code> cache ID */
    private static int dateOfBirthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DateOfBirth",CID));

    /**
     * Gets the <code>DateOfBirth</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDateOfBirthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dateOfBirthCID);
    }


    /**
     * Gets the <code>DateOfBirth</code> attribute value.
     * @return the value
     *
     * @see #setDateOfBirth
     * @see #removeDateOfBirth
     */
    public final java.util.GregorianCalendar getDateOfBirth() {
        return getDate(getDateOfBirthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DateOfBirth</code> attribute value.
     * @param val the new value
     *
     * @see #getDateOfBirth
     * @see #removeDateOfBirth
     */
    public final void setDateOfBirth(java.util.GregorianCalendar val) {
        setDate(getDateOfBirthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DateOfBirth</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDateOfBirth
     * @see #setDateOfBirth
     */
    public final void removeDateOfBirth() {
        removeValue(getDateOfBirthAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDateOfBirth
     * @see #setDateOfBirth
     */
    public final boolean isDateOfBirthNull() {
        return isNull(getDateOfBirthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDateOfBirth
     * @see #setDateOfBirth
     */
    public final boolean isDateOfBirthDefaultValue() {
        return isDefaultValue(getDateOfBirthAttribute(getMtDatabase()));
    }


    /* Attribute 'RegistrationDate' */

    /** Attribute <code>RegistrationDate</code> cache ID */
    private static int registrationDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("RegistrationDate",CID));

    /**
     * Gets the <code>RegistrationDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getRegistrationDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(registrationDateCID);
    }


    /**
     * Gets the <code>RegistrationDate</code> attribute value.
     * @return the value
     *
     * @see #setRegistrationDate
     * @see #removeRegistrationDate
     */
    public final java.util.GregorianCalendar getRegistrationDate() {
        return getDate(getRegistrationDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>RegistrationDate</code> attribute value.
     * @param val the new value
     *
     * @see #getRegistrationDate
     * @see #removeRegistrationDate
     */
    public final void setRegistrationDate(java.util.GregorianCalendar val) {
        setDate(getRegistrationDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>RegistrationDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getRegistrationDate
     * @see #setRegistrationDate
     */
    public final void removeRegistrationDate() {
        removeValue(getRegistrationDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getRegistrationDate
     * @see #setRegistrationDate
     */
    public final boolean isRegistrationDateDefaultValue() {
        return isDefaultValue(getRegistrationDateAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'LoyaltyCard' */

    /** Relationship <code>LoyaltyCard</code> cache ID */
    private static int loyaltyCardCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("LoyaltyCard",CID));

    /**
     * Gets the <code>LoyaltyCard</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getLoyaltyCardRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(loyaltyCardCID);
    }

    /**
     * Gets the <code>LoyaltyCard</code> sucessor object.
     * @return an object 
     *
     * @see #setLoyaltyCard
     * @see #clearLoyaltyCard
     */
    public final com.joe.models.ClientCard getLoyaltyCard() {
        return (com.joe.models.ClientCard)getSuccessor(getLoyaltyCardRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>LoyaltyCard</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getLoyaltyCard
     * @see #clearLoyaltyCard
     */
    public final void setLoyaltyCard(com.joe.models.ClientCard succ) {
        setSuccessor(getLoyaltyCardRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>LoyaltyCard</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearLoyaltyCard() {
        clearSuccessors(getLoyaltyCardRelationship(getMtDatabase()));
    }


    /* Relationship 'ClientAddress' */

    /** Relationship <code>ClientAddress</code> cache ID */
    private static int clientAddressCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("ClientAddress",CID));

    /**
     * Gets the <code>ClientAddress</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getClientAddressRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(clientAddressCID);
    }

    /**
     * Gets the <code>ClientAddress</code> sucessor object.
     * @return an object 
     *
     * @see #setClientAddress
     * @see #clearClientAddress
     */
    public final com.joe.models.Address getClientAddress() {
        return (com.joe.models.Address)getSuccessor(getClientAddressRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>ClientAddress</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getClientAddress
     * @see #clearClientAddress
     */
    public final void setClientAddress(com.joe.models.Address succ) {
        setSuccessor(getClientAddressRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>ClientAddress</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearClientAddress() {
        clearSuccessors(getClientAddressRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'ClientId_IDX' */

    /** Index <code>ClientId_IDX</code> cache ID */
    private static int clientId_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.ClientId_IDX"));

    /**
     * Gets the <code>ClientId_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getClientId_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(clientId_IDXIndexCID);
    }

    /**
     * Finds one <code>Client</code> object in index <code>ClientId_IDX</code>.
     * @param db a database
     * @param clientId search parameter
     * @return the matching <code>Client</code> object or <code>null</code> if none was found
     */
    public static Client lookupClientId_IDX(com.matisse.MtDatabase db, String clientId) {
        return (Client)getClientId_IDXIndex(db).lookup(new Object[] {clientId}, getClass(db));
    }

    /**
     * Finds <code>Client</code> objects in index <code>ClientId_IDX</code>.
     * @param db a database
     * @param clientId search parameter
     * @return the matching <code>Client</code> objects or an empty array if none was found
     */
    public static Client[] lookupObjectsClientId_IDX(com.matisse.MtDatabase db, String clientId) {
        return (Client[])getClientId_IDXIndex(db).lookupObjects(new Object[] {clientId}, getClass(db), Client.class);
    }

    /**
     * Opens an iterator on index <code>ClientId_IDX</code> for class <code>Client</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromClientId search parameter
     * @param toClientId search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> clientId_IDXIterator(com.matisse.MtDatabase db, String fromClientId, String toClientId) {
        return getClientId_IDXIndex(db).<E>iterator(new Object[] {fromClientId}, new Object[] {toClientId}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Client.class);
    }

    /**
     * Opens an iterator on index <code>ClientId_IDX</code> for class <code>Client</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromClientId search parameter
     * @param toClientId search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> clientId_IDXIterator(com.matisse.MtDatabase db, String fromClientId, String toClientId, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getClientId_IDXIndex(db).iterator(new Object[] {fromClientId}, new Object[] {toClientId}, filterClass, direction, numObjPerBuffer, Client.class);
    }

    /* Index 'ClientName_IDX' */

    /** Index <code>ClientName_IDX</code> cache ID */
    private static int clientName_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.ClientName_IDX"));

    /**
     * Gets the <code>ClientName_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getClientName_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(clientName_IDXIndexCID);
    }

    /**
     * Finds one <code>Client</code> object in index <code>ClientName_IDX</code>.
     * @param db a database
     * @param firstname search parameter
     * @param surname search parameter
     * @return the matching <code>Client</code> object or <code>null</code> if none was found
     */
    public static Client lookupClientName_IDX(com.matisse.MtDatabase db, String firstname, String surname) {
        return (Client)getClientName_IDXIndex(db).lookup(new Object[] {firstname, surname}, getClass(db));
    }

    /**
     * Finds <code>Client</code> objects in index <code>ClientName_IDX</code>.
     * @param db a database
     * @param firstname search parameter
     * @param surname search parameter
     * @return the matching <code>Client</code> objects or an empty array if none was found
     */
    public static Client[] lookupObjectsClientName_IDX(com.matisse.MtDatabase db, String firstname, String surname) {
        return (Client[])getClientName_IDXIndex(db).lookupObjects(new Object[] {firstname, surname}, getClass(db), Client.class);
    }

    /**
     * Opens an iterator on index <code>ClientName_IDX</code> for class <code>Client</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromFirstname search parameter
     * @param fromSurname search parameter
     * @param toFirstname search parameter
     * @param toSurname search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> clientName_IDXIterator(com.matisse.MtDatabase db, String fromFirstname, String fromSurname, String toFirstname, String toSurname) {
        return getClientName_IDXIndex(db).<E>iterator(new Object[] {fromFirstname, fromSurname}, new Object[] {toFirstname, toSurname}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Client.class);
    }

    /**
     * Opens an iterator on index <code>ClientName_IDX</code> for class <code>Client</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromFirstname search parameter
     * @param fromSurname search parameter
     * @param toFirstname search parameter
     * @param toSurname search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> clientName_IDXIterator(com.matisse.MtDatabase db, String fromFirstname, String fromSurname, String toFirstname, String toSurname, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getClientName_IDXIndex(db).iterator(new Object[] {fromFirstname, fromSurname}, new Object[] {toFirstname, toSurname}, filterClass, direction, numObjPerBuffer, Client.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Client(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Client]";
    }
}
