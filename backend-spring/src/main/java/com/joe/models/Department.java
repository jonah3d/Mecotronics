/*
 * Department.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Tue Jun 24 21:54:41 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Department</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Department extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Tue Jun 24 21:54:41 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Department</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Department"));

    /**
     * Gets the <code>Department</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Department(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Department(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Department.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Department.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Department.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Department.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'DepartmentNumber' */

    /** Attribute <code>DepartmentNumber</code> cache ID */
    private static int departmentNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DepartmentNumber",CID));

    /**
     * Gets the <code>DepartmentNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDepartmentNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(departmentNumberCID);
    }


    /**
     * Gets the <code>DepartmentNumber</code> attribute value.
     * @return the value
     *
     * @see #setDepartmentNumber
     * @see #removeDepartmentNumber
     */
    public final String getDepartmentNumber() {
        return getString(getDepartmentNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DepartmentNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getDepartmentNumber
     * @see #removeDepartmentNumber
     */
    public final void setDepartmentNumber(String val) {
        setString(getDepartmentNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DepartmentNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDepartmentNumber
     * @see #setDepartmentNumber
     */
    public final void removeDepartmentNumber() {
        removeValue(getDepartmentNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDepartmentNumber
     * @see #setDepartmentNumber
     */
    public final boolean isDepartmentNumberDefaultValue() {
        return isDefaultValue(getDepartmentNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'DepartmentName' */

    /** Attribute <code>DepartmentName</code> cache ID */
    private static int departmentNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DepartmentName",CID));

    /**
     * Gets the <code>DepartmentName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDepartmentNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(departmentNameCID);
    }


    /**
     * Gets the <code>DepartmentName</code> attribute value.
     * @return the value
     *
     * @see #setDepartmentName
     * @see #removeDepartmentName
     */
    public final String getDepartmentName() {
        return getString(getDepartmentNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DepartmentName</code> attribute value.
     * @param val the new value
     *
     * @see #getDepartmentName
     * @see #removeDepartmentName
     */
    public final void setDepartmentName(String val) {
        setString(getDepartmentNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DepartmentName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDepartmentName
     * @see #setDepartmentName
     */
    public final void removeDepartmentName() {
        removeValue(getDepartmentNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDepartmentName
     * @see #setDepartmentName
     */
    public final boolean isDepartmentNameDefaultValue() {
        return isDefaultValue(getDepartmentNameAttribute(getMtDatabase()));
    }


    /* Attribute 'Description' */

    /** Attribute <code>Description</code> cache ID */
    private static int descriptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Description",CID));

    /**
     * Gets the <code>Description</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDescriptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(descriptionCID);
    }


    /**
     * Gets the <code>Description</code> attribute value.
     * @return the value
     *
     * @see #setDescription
     * @see #removeDescription
     */
    public final String getDescription() {
        return getString(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Description</code> attribute value.
     * @param val the new value
     *
     * @see #getDescription
     * @see #removeDescription
     */
    public final void setDescription(String val) {
        setString(getDescriptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Description</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final void removeDescription() {
        removeValue(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionNull() {
        return isNull(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionDefaultValue() {
        return isDefaultValue(getDescriptionAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'Members' */

    /** Relationship <code>Members</code> cache ID */
    private static int membersCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("Members",CID));

    /**
     * Gets the <code>Members</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getMembersRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(membersCID);
    }

    /**
     * Gets the <code>Members</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getMembersSize
     * @see #membersIterator
     * @see #setMembers
     * @see #removeMembers
     */
    public final com.joe.models.Employee[] getMembers() {
        return (com.joe.models.Employee[])getSuccessors(getMembersRelationship(getMtDatabase()), com.joe.models.Employee.class);
    }

    /**
     * Counts the <code>Members</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getMembers
     * @see #membersIterator
     * @see #setMembers
     * @see #removeMembers
     */
    public final int getMembersSize() {
        return getSuccessorSize(getMembersRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>Members</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getMembers
     * @see #getMembersSize
     * @see #setMembers
     * @see #removeMembers
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> membersIterator() {
        return this.<E>successorIterator(getMembersRelationship(getMtDatabase()), com.joe.models.Employee.class);
    }

    /**
     * Sets the <code>Members</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getMembers
     * @see #getMembersSize
     * @see #membersIterator
     * @see #removeMembers
     */
    public final void setMembers(com.joe.models.Employee[] succs) {
        setSuccessors(getMembersRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>Members</code> successors list.
     * @param succ the object to add
     *
     * @see #getMembers
     * @see #getMembersSize
     * @see #membersIterator
     * @see #setMembers
     * @see #removeMembers
     */
    public final void prependMembers(com.joe.models.Employee succ) {
        prependSuccessor(getMembersRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>Members</code> successors list.
     * @param succ the object to add
     *
     * @see #getMembers
     * @see #setMembers
     * @see #removeMembers
     * @see #getMembersSize
     * @see #membersIterator
     */
    public final void appendMembers(com.joe.models.Employee succ) {
        appendSuccessor(getMembersRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>Members</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getMembers
     * @see #setMembers
     * @see #removeMembers
     * @see #getMembersSize
     * @see #membersIterator
     */
    public final void appendMembers(com.joe.models.Employee[] succs) {
        addSuccessors(getMembersRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>Members</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getMembers
     * @see #setMembers
     * @see #getMembersSize
     * @see #membersIterator
     */
    public void removeMembers(com.joe.models.Employee[] succs) {
        removeSuccessors(getMembersRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>Members</code> successors list.
     * @param succ the object to remove
     *
     * @see #getMembers
     * @see #setMembers
     * @see #getMembersSize
     * @see #membersIterator
     */
    public void removeMembers(com.joe.models.Employee succ) {
        removeSuccessor(getMembersRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>Members</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearMembers() {
        clearSuccessors(getMembersRelationship(getMtDatabase()));
    }


    /* Relationship 'DepartmentHead' */

    /** Relationship <code>DepartmentHead</code> cache ID */
    private static int departmentHeadCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("DepartmentHead",CID));

    /**
     * Gets the <code>DepartmentHead</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getDepartmentHeadRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(departmentHeadCID);
    }

    /**
     * Gets the <code>DepartmentHead</code> sucessor object.
     * @return an object 
     *
     * @see #setDepartmentHead
     * @see #clearDepartmentHead
     */
    public final com.joe.models.Employee getDepartmentHead() {
        return (com.joe.models.Employee)getSuccessor(getDepartmentHeadRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>DepartmentHead</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getDepartmentHead
     * @see #clearDepartmentHead
     */
    public final void setDepartmentHead(com.joe.models.Employee succ) {
        setSuccessor(getDepartmentHeadRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>DepartmentHead</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearDepartmentHead() {
        clearSuccessors(getDepartmentHeadRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'DeptNo_IDX' */

    /** Index <code>DeptNo_IDX</code> cache ID */
    private static int deptNo_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.DeptNo_IDX"));

    /**
     * Gets the <code>DeptNo_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getDeptNo_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(deptNo_IDXIndexCID);
    }

    /**
     * Finds one <code>Department</code> object in index <code>DeptNo_IDX</code>.
     * @param db a database
     * @param departmentNumber search parameter
     * @return the matching <code>Department</code> object or <code>null</code> if none was found
     */
    public static Department lookupDeptNo_IDX(com.matisse.MtDatabase db, String departmentNumber) {
        return (Department)getDeptNo_IDXIndex(db).lookup(new Object[] {departmentNumber}, getClass(db));
    }

    /**
     * Finds <code>Department</code> objects in index <code>DeptNo_IDX</code>.
     * @param db a database
     * @param departmentNumber search parameter
     * @return the matching <code>Department</code> objects or an empty array if none was found
     */
    public static Department[] lookupObjectsDeptNo_IDX(com.matisse.MtDatabase db, String departmentNumber) {
        return (Department[])getDeptNo_IDXIndex(db).lookupObjects(new Object[] {departmentNumber}, getClass(db), Department.class);
    }

    /**
     * Opens an iterator on index <code>DeptNo_IDX</code> for class <code>Department</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromDepartmentNumber search parameter
     * @param toDepartmentNumber search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> deptNo_IDXIterator(com.matisse.MtDatabase db, String fromDepartmentNumber, String toDepartmentNumber) {
        return getDeptNo_IDXIndex(db).<E>iterator(new Object[] {fromDepartmentNumber}, new Object[] {toDepartmentNumber}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Department.class);
    }

    /**
     * Opens an iterator on index <code>DeptNo_IDX</code> for class <code>Department</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromDepartmentNumber search parameter
     * @param toDepartmentNumber search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> deptNo_IDXIterator(com.matisse.MtDatabase db, String fromDepartmentNumber, String toDepartmentNumber, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getDeptNo_IDXIndex(db).iterator(new Object[] {fromDepartmentNumber}, new Object[] {toDepartmentNumber}, filterClass, direction, numObjPerBuffer, Department.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Department(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Department]";
    }
}
