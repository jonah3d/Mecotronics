/*
 * ClientCard.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Tue Jun 24 21:54:41 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>ClientCard</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class ClientCard extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Tue Jun 24 21:54:41 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>ClientCard</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.ClientCard"));

    /**
     * Gets the <code>ClientCard</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public ClientCard(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected ClientCard(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(ClientCard.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, ClientCard.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(ClientCard.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, ClientCard.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'MemberNumber' */

    /** Attribute <code>MemberNumber</code> cache ID */
    private static int memberNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("MemberNumber",CID));

    /**
     * Gets the <code>MemberNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMemberNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(memberNumberCID);
    }


    /**
     * Gets the <code>MemberNumber</code> attribute value.
     * @return the value
     *
     * @see #setMemberNumber
     * @see #removeMemberNumber
     */
    public final String getMemberNumber() {
        return getString(getMemberNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>MemberNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getMemberNumber
     * @see #removeMemberNumber
     */
    public final void setMemberNumber(String val) {
        setString(getMemberNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>MemberNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMemberNumber
     * @see #setMemberNumber
     */
    public final void removeMemberNumber() {
        removeValue(getMemberNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMemberNumber
     * @see #setMemberNumber
     */
    public final boolean isMemberNumberDefaultValue() {
        return isDefaultValue(getMemberNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'RegistrationDate' */

    /** Attribute <code>RegistrationDate</code> cache ID */
    private static int registrationDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("RegistrationDate",CID));

    /**
     * Gets the <code>RegistrationDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getRegistrationDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(registrationDateCID);
    }


    /**
     * Gets the <code>RegistrationDate</code> attribute value.
     * @return the value
     *
     * @see #setRegistrationDate
     * @see #removeRegistrationDate
     */
    public final java.util.GregorianCalendar getRegistrationDate() {
        return getDate(getRegistrationDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>RegistrationDate</code> attribute value.
     * @param val the new value
     *
     * @see #getRegistrationDate
     * @see #removeRegistrationDate
     */
    public final void setRegistrationDate(java.util.GregorianCalendar val) {
        setDate(getRegistrationDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>RegistrationDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getRegistrationDate
     * @see #setRegistrationDate
     */
    public final void removeRegistrationDate() {
        removeValue(getRegistrationDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getRegistrationDate
     * @see #setRegistrationDate
     */
    public final boolean isRegistrationDateDefaultValue() {
        return isDefaultValue(getRegistrationDateAttribute(getMtDatabase()));
    }


    /* Attribute 'Points' */

    /** Attribute <code>Points</code> cache ID */
    private static int pointsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Points",CID));

    /**
     * Gets the <code>Points</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPointsAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(pointsCID);
    }


    /**
     * Gets the <code>Points</code> attribute value.
     * @return the value
     *
     * @see #setPoints
     * @see #removePoints
     */
    public final int getPoints() {
        return getInteger(getPointsAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Points</code> attribute value.
     * @param val the new value
     *
     * @see #getPoints
     * @see #removePoints
     */
    public final void setPoints(int val) {
        setInteger(getPointsAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Points</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPoints
     * @see #setPoints
     */
    public final void removePoints() {
        removeValue(getPointsAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPoints
     * @see #setPoints
     */
    public final boolean isPointsNull() {
        return isNull(getPointsAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPoints
     * @see #setPoints
     */
    public final boolean isPointsDefaultValue() {
        return isDefaultValue(getPointsAttribute(getMtDatabase()));
    }


    /* Attribute 'CardImage' */

    /** Attribute <code>CardImage</code> cache ID */
    private static int cardImageCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("CardImage",CID));

    /**
     * Gets the <code>CardImage</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCardImageAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(cardImageCID);
    }


    /**
     * Gets the <code>CardImage</code> attribute value.
     * @return the value
     *
     * @see #setCardImage
     * @see #removeCardImage
     */
    public final byte[] getCardImage() {
        return getImage(getCardImageAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>CardImage</code> attribute value.
     * @param val the new value
     *
     * @see #getCardImage
     * @see #removeCardImage
     */
    public final void setCardImage(byte[] val) {
        setImage(getCardImageAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>CardImage</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCardImage
     * @see #setCardImage
     */
    public final void removeCardImage() {
        removeValue(getCardImageAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getCardImage
     * @see #setCardImage
     */
    public final boolean isCardImageNull() {
        return isNull(getCardImageAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCardImage
     * @see #setCardImage
     */
    public final boolean isCardImageDefaultValue() {
        return isDefaultValue(getCardImageAttribute(getMtDatabase()));
    }

    /**
     * Gets the <code>CardImage</code> attribute list size.
     * @return the number of elements in the list
     *
     * @see #setCardImageElements
     * @see #getCardImageElements
     */
    public final long getCardImageSize() {
        return getListSize(getCardImageAttribute(getMtDatabase()));
    }

    /**
     * Reads <code>CardImage</code> attribute value elements into a portion of an array.
     * @param value destination buffer
     * @param offset offset at which to start storing elements
     * @param len the maximum number of elements to read
     * @return the number of elements read
     *
     * @see #setCardImageElements
     * @see #getCardImageSize
     */
    public final int getCardImageElements(byte[] value, long offset, int len) {
        return getImageElements(getCardImageAttribute(getMtDatabase()), value, len, offset);
    }

    /**
     * Writes a portion of an array of elements to the <code>CardImage</code> attribute value.
     * @param value an array of elements
     * @param offset offset from which to start writing characters
     * @param len number of characters to write
     * @param discardAfter truncate the remaining part of the attribute
     *
     * @see #getCardImageElements
     * @see #getCardImageSize
     */
    public final void setCardImageElements(byte[] value, long offset, int len, boolean discardAfter) {
        setImageElements(getCardImageAttribute(getMtDatabase()), value, len, offset, discardAfter);
    }


    /* Attribute 'Status' */

    /** Attribute <code>Status</code> cache ID */
    private static int statusCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Status",CID));

    /**
     * Gets the <code>Status</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStatusAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(statusCID);
    }


    /**
     * Gets the <code>Status</code> attribute value.
     * @return the value
     *
     * @see #setStatus
     * @see #removeStatus
     */
    public final String getStatus() {
        return getString(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Status</code> attribute value.
     * @param val the new value
     *
     * @see #getStatus
     * @see #removeStatus
     */
    public final void setStatus(String val) {
        setString(getStatusAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Status</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final void removeStatus() {
        removeValue(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final boolean isStatusNull() {
        return isNull(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final boolean isStatusDefaultValue() {
        return isDefaultValue(getStatusAttribute(getMtDatabase()));
    }


    /* Attribute 'ExpiryDate' */

    /** Attribute <code>ExpiryDate</code> cache ID */
    private static int expiryDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ExpiryDate",CID));

    /**
     * Gets the <code>ExpiryDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getExpiryDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(expiryDateCID);
    }


    /**
     * Gets the <code>ExpiryDate</code> attribute value.
     * @return the value
     *
     * @see #setExpiryDate
     * @see #removeExpiryDate
     */
    public final java.util.GregorianCalendar getExpiryDate() {
        return getDate(getExpiryDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ExpiryDate</code> attribute value.
     * @param val the new value
     *
     * @see #getExpiryDate
     * @see #removeExpiryDate
     */
    public final void setExpiryDate(java.util.GregorianCalendar val) {
        setDate(getExpiryDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ExpiryDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getExpiryDate
     * @see #setExpiryDate
     */
    public final void removeExpiryDate() {
        removeValue(getExpiryDateAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getExpiryDate
     * @see #setExpiryDate
     */
    public final boolean isExpiryDateNull() {
        return isNull(getExpiryDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getExpiryDate
     * @see #setExpiryDate
     */
    public final boolean isExpiryDateDefaultValue() {
        return isDefaultValue(getExpiryDateAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'CardHolder' */

    /** Relationship <code>CardHolder</code> cache ID */
    private static int cardHolderCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("CardHolder",CID));

    /**
     * Gets the <code>CardHolder</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getCardHolderRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(cardHolderCID);
    }

    /**
     * Gets the <code>CardHolder</code> sucessor object.
     * @return an object 
     *
     * @see #setCardHolder
     * @see #clearCardHolder
     */
    public final com.joe.models.Client getCardHolder() {
        return (com.joe.models.Client)getSuccessor(getCardHolderRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>CardHolder</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getCardHolder
     * @see #clearCardHolder
     */
    public final void setCardHolder(com.joe.models.Client succ) {
        setSuccessor(getCardHolderRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>CardHolder</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearCardHolder() {
        clearSuccessors(getCardHolderRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'MemberNo_IDX' */

    /** Index <code>MemberNo_IDX</code> cache ID */
    private static int memberNo_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.MemberNo_IDX"));

    /**
     * Gets the <code>MemberNo_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getMemberNo_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(memberNo_IDXIndexCID);
    }

    /**
     * Finds one <code>ClientCard</code> object in index <code>MemberNo_IDX</code>.
     * @param db a database
     * @param memberNumber search parameter
     * @return the matching <code>ClientCard</code> object or <code>null</code> if none was found
     */
    public static ClientCard lookupMemberNo_IDX(com.matisse.MtDatabase db, String memberNumber) {
        return (ClientCard)getMemberNo_IDXIndex(db).lookup(new Object[] {memberNumber}, getClass(db));
    }

    /**
     * Finds <code>ClientCard</code> objects in index <code>MemberNo_IDX</code>.
     * @param db a database
     * @param memberNumber search parameter
     * @return the matching <code>ClientCard</code> objects or an empty array if none was found
     */
    public static ClientCard[] lookupObjectsMemberNo_IDX(com.matisse.MtDatabase db, String memberNumber) {
        return (ClientCard[])getMemberNo_IDXIndex(db).lookupObjects(new Object[] {memberNumber}, getClass(db), ClientCard.class);
    }

    /**
     * Opens an iterator on index <code>MemberNo_IDX</code> for class <code>ClientCard</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromMemberNumber search parameter
     * @param toMemberNumber search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> memberNo_IDXIterator(com.matisse.MtDatabase db, String fromMemberNumber, String toMemberNumber) {
        return getMemberNo_IDXIndex(db).<E>iterator(new Object[] {fromMemberNumber}, new Object[] {toMemberNumber}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, ClientCard.class);
    }

    /**
     * Opens an iterator on index <code>MemberNo_IDX</code> for class <code>ClientCard</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromMemberNumber search parameter
     * @param toMemberNumber search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> memberNo_IDXIterator(com.matisse.MtDatabase db, String fromMemberNumber, String toMemberNumber, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getMemberNo_IDXIndex(db).iterator(new Object[] {fromMemberNumber}, new Object[] {toMemberNumber}, filterClass, direction, numObjPerBuffer, ClientCard.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public ClientCard(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[ClientCard]";
    }
}
