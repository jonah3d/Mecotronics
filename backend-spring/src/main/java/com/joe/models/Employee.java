/*
 * Employee.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Thu Jun 26 05:07:10 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Employee</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Employee extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Thu Jun 26 05:07:10 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Employee</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Employee"));

    /**
     * Gets the <code>Employee</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Employee(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Employee(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Employee.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Employee.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Employee.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Employee.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'EmployeeNumber' */

    /** Attribute <code>EmployeeNumber</code> cache ID */
    private static int employeeNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("EmployeeNumber",CID));

    /**
     * Gets the <code>EmployeeNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEmployeeNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(employeeNumberCID);
    }


    /**
     * Gets the <code>EmployeeNumber</code> attribute value.
     * @return the value
     *
     * @see #setEmployeeNumber
     * @see #removeEmployeeNumber
     */
    public final String getEmployeeNumber() {
        return getString(getEmployeeNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>EmployeeNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getEmployeeNumber
     * @see #removeEmployeeNumber
     */
    public final void setEmployeeNumber(String val) {
        setString(getEmployeeNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>EmployeeNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEmployeeNumber
     * @see #setEmployeeNumber
     */
    public final void removeEmployeeNumber() {
        removeValue(getEmployeeNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEmployeeNumber
     * @see #setEmployeeNumber
     */
    public final boolean isEmployeeNumberDefaultValue() {
        return isDefaultValue(getEmployeeNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'Firstname' */

    /** Attribute <code>Firstname</code> cache ID */
    private static int firstnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Firstname",CID));

    /**
     * Gets the <code>Firstname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getFirstnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(firstnameCID);
    }


    /**
     * Gets the <code>Firstname</code> attribute value.
     * @return the value
     *
     * @see #setFirstname
     * @see #removeFirstname
     */
    public final String getFirstname() {
        return getString(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Firstname</code> attribute value.
     * @param val the new value
     *
     * @see #getFirstname
     * @see #removeFirstname
     */
    public final void setFirstname(String val) {
        setString(getFirstnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Firstname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final void removeFirstname() {
        removeValue(getFirstnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getFirstname
     * @see #setFirstname
     */
    public final boolean isFirstnameDefaultValue() {
        return isDefaultValue(getFirstnameAttribute(getMtDatabase()));
    }


    /* Attribute 'Surname' */

    /** Attribute <code>Surname</code> cache ID */
    private static int surnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Surname",CID));

    /**
     * Gets the <code>Surname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSurnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(surnameCID);
    }


    /**
     * Gets the <code>Surname</code> attribute value.
     * @return the value
     *
     * @see #setSurname
     * @see #removeSurname
     */
    public final String getSurname() {
        return getString(getSurnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Surname</code> attribute value.
     * @param val the new value
     *
     * @see #getSurname
     * @see #removeSurname
     */
    public final void setSurname(String val) {
        setString(getSurnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Surname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSurname
     * @see #setSurname
     */
    public final void removeSurname() {
        removeValue(getSurnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSurname
     * @see #setSurname
     */
    public final boolean isSurnameDefaultValue() {
        return isDefaultValue(getSurnameAttribute(getMtDatabase()));
    }


    /* Attribute 'HireDate' */

    /** Attribute <code>HireDate</code> cache ID */
    private static int hireDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("HireDate",CID));

    /**
     * Gets the <code>HireDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getHireDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(hireDateCID);
    }


    /**
     * Gets the <code>HireDate</code> attribute value.
     * @return the value
     *
     * @see #setHireDate
     * @see #removeHireDate
     */
    public final java.util.GregorianCalendar getHireDate() {
        return getDate(getHireDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>HireDate</code> attribute value.
     * @param val the new value
     *
     * @see #getHireDate
     * @see #removeHireDate
     */
    public final void setHireDate(java.util.GregorianCalendar val) {
        setDate(getHireDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>HireDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getHireDate
     * @see #setHireDate
     */
    public final void removeHireDate() {
        removeValue(getHireDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getHireDate
     * @see #setHireDate
     */
    public final boolean isHireDateDefaultValue() {
        return isDefaultValue(getHireDateAttribute(getMtDatabase()));
    }


    /* Attribute 'DateOfBirth' */

    /** Attribute <code>DateOfBirth</code> cache ID */
    private static int dateOfBirthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DateOfBirth",CID));

    /**
     * Gets the <code>DateOfBirth</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDateOfBirthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dateOfBirthCID);
    }


    /**
     * Gets the <code>DateOfBirth</code> attribute value.
     * @return the value
     *
     * @see #setDateOfBirth
     * @see #removeDateOfBirth
     */
    public final java.util.GregorianCalendar getDateOfBirth() {
        return getDate(getDateOfBirthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DateOfBirth</code> attribute value.
     * @param val the new value
     *
     * @see #getDateOfBirth
     * @see #removeDateOfBirth
     */
    public final void setDateOfBirth(java.util.GregorianCalendar val) {
        setDate(getDateOfBirthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DateOfBirth</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDateOfBirth
     * @see #setDateOfBirth
     */
    public final void removeDateOfBirth() {
        removeValue(getDateOfBirthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDateOfBirth
     * @see #setDateOfBirth
     */
    public final boolean isDateOfBirthDefaultValue() {
        return isDefaultValue(getDateOfBirthAttribute(getMtDatabase()));
    }


    /* Attribute 'Salary' */

    /** Attribute <code>Salary</code> cache ID */
    private static int salaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Salary",CID));

    /**
     * Gets the <code>Salary</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSalaryAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(salaryCID);
    }


    /**
     * Gets the <code>Salary</code> attribute value.
     * @return the value
     *
     * @see #setSalary
     * @see #removeSalary
     */
    public final double getSalary() {
        return getDouble(getSalaryAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Salary</code> attribute value.
     * @param val the new value
     *
     * @see #getSalary
     * @see #removeSalary
     */
    public final void setSalary(double val) {
        setDouble(getSalaryAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Salary</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSalary
     * @see #setSalary
     */
    public final void removeSalary() {
        removeValue(getSalaryAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSalary
     * @see #setSalary
     */
    public final boolean isSalaryNull() {
        return isNull(getSalaryAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSalary
     * @see #setSalary
     */
    public final boolean isSalaryDefaultValue() {
        return isDefaultValue(getSalaryAttribute(getMtDatabase()));
    }


    /* Attribute 'Commission' */

    /** Attribute <code>Commission</code> cache ID */
    private static int commissionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Commission",CID));

    /**
     * Gets the <code>Commission</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCommissionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(commissionCID);
    }


    /**
     * Gets the <code>Commission</code> attribute value.
     * @return the value
     *
     * @see #setCommission
     * @see #removeCommission
     */
    public final double getCommission() {
        return getDouble(getCommissionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Commission</code> attribute value.
     * @param val the new value
     *
     * @see #getCommission
     * @see #removeCommission
     */
    public final void setCommission(double val) {
        setDouble(getCommissionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Commission</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCommission
     * @see #setCommission
     */
    public final void removeCommission() {
        removeValue(getCommissionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getCommission
     * @see #setCommission
     */
    public final boolean isCommissionNull() {
        return isNull(getCommissionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCommission
     * @see #setCommission
     */
    public final boolean isCommissionDefaultValue() {
        return isDefaultValue(getCommissionAttribute(getMtDatabase()));
    }


    /* Attribute 'Photo' */

    /** Attribute <code>Photo</code> cache ID */
    private static int photoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Photo",CID));

    /**
     * Gets the <code>Photo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPhotoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(photoCID);
    }


    /**
     * Gets the <code>Photo</code> attribute value.
     * @return the value
     *
     * @see #setPhoto
     * @see #removePhoto
     */
    public final byte[] getPhoto() {
        return getImage(getPhotoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Photo</code> attribute value.
     * @param val the new value
     *
     * @see #getPhoto
     * @see #removePhoto
     */
    public final void setPhoto(byte[] val) {
        setImage(getPhotoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Photo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPhoto
     * @see #setPhoto
     */
    public final void removePhoto() {
        removeValue(getPhotoAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPhoto
     * @see #setPhoto
     */
    public final boolean isPhotoNull() {
        return isNull(getPhotoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPhoto
     * @see #setPhoto
     */
    public final boolean isPhotoDefaultValue() {
        return isDefaultValue(getPhotoAttribute(getMtDatabase()));
    }

    /**
     * Gets the <code>Photo</code> attribute list size.
     * @return the number of elements in the list
     *
     * @see #setPhotoElements
     * @see #getPhotoElements
     */
    public final long getPhotoSize() {
        return getListSize(getPhotoAttribute(getMtDatabase()));
    }

    /**
     * Reads <code>Photo</code> attribute value elements into a portion of an array.
     * @param value destination buffer
     * @param offset offset at which to start storing elements
     * @param len the maximum number of elements to read
     * @return the number of elements read
     *
     * @see #setPhotoElements
     * @see #getPhotoSize
     */
    public final int getPhotoElements(byte[] value, long offset, int len) {
        return getImageElements(getPhotoAttribute(getMtDatabase()), value, len, offset);
    }

    /**
     * Writes a portion of an array of elements to the <code>Photo</code> attribute value.
     * @param value an array of elements
     * @param offset offset from which to start writing characters
     * @param len number of characters to write
     * @param discardAfter truncate the remaining part of the attribute
     *
     * @see #getPhotoElements
     * @see #getPhotoSize
     */
    public final void setPhotoElements(byte[] value, long offset, int len, boolean discardAfter) {
        setImageElements(getPhotoAttribute(getMtDatabase()), value, len, offset, discardAfter);
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'MemberOf' */

    /** Relationship <code>MemberOf</code> cache ID */
    private static int memberOfCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("MemberOf",CID));

    /**
     * Gets the <code>MemberOf</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getMemberOfRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(memberOfCID);
    }

    /**
     * Gets the <code>MemberOf</code> sucessor object.
     * @return an object 
     *
     * @see #setMemberOf
     * @see #clearMemberOf
     */
    public final com.joe.models.Department getMemberOf() {
        return (com.joe.models.Department)getSuccessor(getMemberOfRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>MemberOf</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getMemberOf
     * @see #clearMemberOf
     */
    public final void setMemberOf(com.joe.models.Department succ) {
        setSuccessor(getMemberOfRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>MemberOf</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearMemberOf() {
        clearSuccessors(getMemberOfRelationship(getMtDatabase()));
    }


    /* Relationship 'Head' */

    /** Relationship <code>Head</code> cache ID */
    private static int headCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("Head",CID));

    /**
     * Gets the <code>Head</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getHeadRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(headCID);
    }

    /**
     * Gets the <code>Head</code> sucessor object.
     * @return an object 
     *
     * @see #setHead
     * @see #clearHead
     */
    public final com.joe.models.Department getHead() {
        return (com.joe.models.Department)getSuccessor(getHeadRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>Head</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getHead
     * @see #clearHead
     */
    public final void setHead(com.joe.models.Department succ) {
        setSuccessor(getHeadRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>Head</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearHead() {
        clearSuccessors(getHeadRelationship(getMtDatabase()));
    }


    /* Relationship 'Credentials' */

    /** Relationship <code>Credentials</code> cache ID */
    private static int credentialsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("Credentials",CID));

    /**
     * Gets the <code>Credentials</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getCredentialsRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(credentialsCID);
    }

    /**
     * Gets the <code>Credentials</code> sucessor object.
     * @return an object 
     *
     * @see #setCredentials
     * @see #clearCredentials
     */
    public final com.joe.models.EmployeeLogin getCredentials() {
        return (com.joe.models.EmployeeLogin)getSuccessor(getCredentialsRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>Credentials</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getCredentials
     * @see #clearCredentials
     */
    public final void setCredentials(com.joe.models.EmployeeLogin succ) {
        setSuccessor(getCredentialsRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>Credentials</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearCredentials() {
        clearSuccessors(getCredentialsRelationship(getMtDatabase()));
    }


    /* Relationship 'Job' */

    /** Relationship <code>Job</code> cache ID */
    private static int jobCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("Job",CID));

    /**
     * Gets the <code>Job</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getJobRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(jobCID);
    }

    /**
     * Gets the <code>Job</code> sucessor object.
     * @return an object 
     *
     * @see #setJob
     * @see #clearJob
     */
    public final com.joe.models.Occupation getJob() {
        return (com.joe.models.Occupation)getSuccessor(getJobRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>Job</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getJob
     * @see #clearJob
     */
    public final void setJob(com.joe.models.Occupation succ) {
        setSuccessor(getJobRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>Job</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearJob() {
        clearSuccessors(getJobRelationship(getMtDatabase()));
    }


    /* Relationship 'EmployeeRole' */

    /** Relationship <code>EmployeeRole</code> cache ID */
    private static int employeeRoleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("EmployeeRole",CID));

    /**
     * Gets the <code>EmployeeRole</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getEmployeeRoleRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(employeeRoleCID);
    }

    /**
     * Gets the <code>EmployeeRole</code> sucessor object.
     * @return an object 
     *
     * @see #setEmployeeRole
     * @see #clearEmployeeRole
     */
    public final com.joe.models.Role getEmployeeRole() {
        return (com.joe.models.Role)getSuccessor(getEmployeeRoleRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>EmployeeRole</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getEmployeeRole
     * @see #clearEmployeeRole
     */
    public final void setEmployeeRole(com.joe.models.Role succ) {
        setSuccessor(getEmployeeRoleRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>EmployeeRole</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearEmployeeRole() {
        clearSuccessors(getEmployeeRoleRelationship(getMtDatabase()));
    }


    /* Relationship 'HomeAddress' */

    /** Relationship <code>HomeAddress</code> cache ID */
    private static int homeAddressCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("HomeAddress",CID));

    /**
     * Gets the <code>HomeAddress</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getHomeAddressRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(homeAddressCID);
    }

    /**
     * Gets the <code>HomeAddress</code> sucessor object.
     * @return an object 
     *
     * @see #setHomeAddress
     * @see #clearHomeAddress
     */
    public final com.joe.models.Address getHomeAddress() {
        return (com.joe.models.Address)getSuccessor(getHomeAddressRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>HomeAddress</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getHomeAddress
     * @see #clearHomeAddress
     */
    public final void setHomeAddress(com.joe.models.Address succ) {
        setSuccessor(getHomeAddressRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>HomeAddress</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearHomeAddress() {
        clearSuccessors(getHomeAddressRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'EmpNo_IDX' */

    /** Index <code>EmpNo_IDX</code> cache ID */
    private static int empNo_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.EmpNo_IDX"));

    /**
     * Gets the <code>EmpNo_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getEmpNo_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(empNo_IDXIndexCID);
    }

    /**
     * Finds one <code>Employee</code> object in index <code>EmpNo_IDX</code>.
     * @param db a database
     * @param employeeNumber search parameter
     * @return the matching <code>Employee</code> object or <code>null</code> if none was found
     */
    public static Employee lookupEmpNo_IDX(com.matisse.MtDatabase db, String employeeNumber) {
        return (Employee)getEmpNo_IDXIndex(db).lookup(new Object[] {employeeNumber}, getClass(db));
    }

    /**
     * Finds <code>Employee</code> objects in index <code>EmpNo_IDX</code>.
     * @param db a database
     * @param employeeNumber search parameter
     * @return the matching <code>Employee</code> objects or an empty array if none was found
     */
    public static Employee[] lookupObjectsEmpNo_IDX(com.matisse.MtDatabase db, String employeeNumber) {
        return (Employee[])getEmpNo_IDXIndex(db).lookupObjects(new Object[] {employeeNumber}, getClass(db), Employee.class);
    }

    /**
     * Opens an iterator on index <code>EmpNo_IDX</code> for class <code>Employee</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromEmployeeNumber search parameter
     * @param toEmployeeNumber search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empNo_IDXIterator(com.matisse.MtDatabase db, String fromEmployeeNumber, String toEmployeeNumber) {
        return getEmpNo_IDXIndex(db).<E>iterator(new Object[] {fromEmployeeNumber}, new Object[] {toEmployeeNumber}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Employee.class);
    }

    /**
     * Opens an iterator on index <code>EmpNo_IDX</code> for class <code>Employee</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromEmployeeNumber search parameter
     * @param toEmployeeNumber search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empNo_IDXIterator(com.matisse.MtDatabase db, String fromEmployeeNumber, String toEmployeeNumber, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getEmpNo_IDXIndex(db).iterator(new Object[] {fromEmployeeNumber}, new Object[] {toEmployeeNumber}, filterClass, direction, numObjPerBuffer, Employee.class);
    }

    /* Index 'EmpName_IDX' */

    /** Index <code>EmpName_IDX</code> cache ID */
    private static int empName_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.EmpName_IDX"));

    /**
     * Gets the <code>EmpName_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getEmpName_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(empName_IDXIndexCID);
    }

    /**
     * Finds one <code>Employee</code> object in index <code>EmpName_IDX</code>.
     * @param db a database
     * @param firstname search parameter
     * @param surname search parameter
     * @return the matching <code>Employee</code> object or <code>null</code> if none was found
     */
    public static Employee lookupEmpName_IDX(com.matisse.MtDatabase db, String firstname, String surname) {
        return (Employee)getEmpName_IDXIndex(db).lookup(new Object[] {firstname, surname}, getClass(db));
    }

    /**
     * Finds <code>Employee</code> objects in index <code>EmpName_IDX</code>.
     * @param db a database
     * @param firstname search parameter
     * @param surname search parameter
     * @return the matching <code>Employee</code> objects or an empty array if none was found
     */
    public static Employee[] lookupObjectsEmpName_IDX(com.matisse.MtDatabase db, String firstname, String surname) {
        return (Employee[])getEmpName_IDXIndex(db).lookupObjects(new Object[] {firstname, surname}, getClass(db), Employee.class);
    }

    /**
     * Opens an iterator on index <code>EmpName_IDX</code> for class <code>Employee</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromFirstname search parameter
     * @param fromSurname search parameter
     * @param toFirstname search parameter
     * @param toSurname search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empName_IDXIterator(com.matisse.MtDatabase db, String fromFirstname, String fromSurname, String toFirstname, String toSurname) {
        return getEmpName_IDXIndex(db).<E>iterator(new Object[] {fromFirstname, fromSurname}, new Object[] {toFirstname, toSurname}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Employee.class);
    }

    /**
     * Opens an iterator on index <code>EmpName_IDX</code> for class <code>Employee</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromFirstname search parameter
     * @param fromSurname search parameter
     * @param toFirstname search parameter
     * @param toSurname search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> empName_IDXIterator(com.matisse.MtDatabase db, String fromFirstname, String fromSurname, String toFirstname, String toSurname, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getEmpName_IDXIndex(db).iterator(new Object[] {fromFirstname, fromSurname}, new Object[] {toFirstname, toSurname}, filterClass, direction, numObjPerBuffer, Employee.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Employee(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Employee]";
    }
}
