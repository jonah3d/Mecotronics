/*
 * Product.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Thu Jun 26 05:07:10 2025
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package com.joe.models;

import com.matisse.reflect.*;

/**
 * <code>Product</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Product extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Thu Jun 26 05:07:10 2025
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Product</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("com.joe.models.Product"));

    /**
     * Gets the <code>Product</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Product(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Product(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Product.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Product.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Product.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Product.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'Reference' */

    /** Attribute <code>Reference</code> cache ID */
    private static int referenceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Reference",CID));

    /**
     * Gets the <code>Reference</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getReferenceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(referenceCID);
    }


    /**
     * Gets the <code>Reference</code> attribute value.
     * @return the value
     *
     * @see #setReference
     * @see #removeReference
     */
    public final String getReference() {
        return getString(getReferenceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Reference</code> attribute value.
     * @param val the new value
     *
     * @see #getReference
     * @see #removeReference
     */
    public final void setReference(String val) {
        setString(getReferenceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Reference</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getReference
     * @see #setReference
     */
    public final void removeReference() {
        removeValue(getReferenceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getReference
     * @see #setReference
     */
    public final boolean isReferenceDefaultValue() {
        return isDefaultValue(getReferenceAttribute(getMtDatabase()));
    }


    /* Attribute 'Name' */

    /** Attribute <code>Name</code> cache ID */
    private static int nameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Name",CID));

    /**
     * Gets the <code>Name</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nameCID);
    }


    /**
     * Gets the <code>Name</code> attribute value.
     * @return the value
     *
     * @see #setName
     * @see #removeName
     */
    public final String getName() {
        return getString(getNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Name</code> attribute value.
     * @param val the new value
     *
     * @see #getName
     * @see #removeName
     */
    public final void setName(String val) {
        setString(getNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Name</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getName
     * @see #setName
     */
    public final void removeName() {
        removeValue(getNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getName
     * @see #setName
     */
    public final boolean isNameDefaultValue() {
        return isDefaultValue(getNameAttribute(getMtDatabase()));
    }


    /* Attribute 'Brand' */

    /** Attribute <code>Brand</code> cache ID */
    private static int brandCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Brand",CID));

    /**
     * Gets the <code>Brand</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBrandAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(brandCID);
    }


    /**
     * Gets the <code>Brand</code> attribute value.
     * @return the value
     *
     * @see #setBrand
     * @see #removeBrand
     */
    public final String getBrand() {
        return getString(getBrandAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Brand</code> attribute value.
     * @param val the new value
     *
     * @see #getBrand
     * @see #removeBrand
     */
    public final void setBrand(String val) {
        setString(getBrandAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Brand</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBrand
     * @see #setBrand
     */
    public final void removeBrand() {
        removeValue(getBrandAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBrand
     * @see #setBrand
     */
    public final boolean isBrandDefaultValue() {
        return isDefaultValue(getBrandAttribute(getMtDatabase()));
    }


    /* Attribute 'Model' */

    /** Attribute <code>Model</code> cache ID */
    private static int modelCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Model",CID));

    /**
     * Gets the <code>Model</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getModelAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(modelCID);
    }


    /**
     * Gets the <code>Model</code> attribute value.
     * @return the value
     *
     * @see #setModel
     * @see #removeModel
     */
    public final String getModel() {
        return getString(getModelAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Model</code> attribute value.
     * @param val the new value
     *
     * @see #getModel
     * @see #removeModel
     */
    public final void setModel(String val) {
        setString(getModelAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Model</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getModel
     * @see #setModel
     */
    public final void removeModel() {
        removeValue(getModelAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getModel
     * @see #setModel
     */
    public final boolean isModelNull() {
        return isNull(getModelAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getModel
     * @see #setModel
     */
    public final boolean isModelDefaultValue() {
        return isDefaultValue(getModelAttribute(getMtDatabase()));
    }


    /* Attribute 'EuropeanArticleNumber' */

    /** Attribute <code>EuropeanArticleNumber</code> cache ID */
    private static int europeanArticleNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("EuropeanArticleNumber",CID));

    /**
     * Gets the <code>EuropeanArticleNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEuropeanArticleNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(europeanArticleNumberCID);
    }


    /**
     * Gets the <code>EuropeanArticleNumber</code> attribute value.
     * @return the value
     *
     * @see #setEuropeanArticleNumber
     * @see #removeEuropeanArticleNumber
     */
    public final String getEuropeanArticleNumber() {
        return getString(getEuropeanArticleNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>EuropeanArticleNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getEuropeanArticleNumber
     * @see #removeEuropeanArticleNumber
     */
    public final void setEuropeanArticleNumber(String val) {
        setString(getEuropeanArticleNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>EuropeanArticleNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEuropeanArticleNumber
     * @see #setEuropeanArticleNumber
     */
    public final void removeEuropeanArticleNumber() {
        removeValue(getEuropeanArticleNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getEuropeanArticleNumber
     * @see #setEuropeanArticleNumber
     */
    public final boolean isEuropeanArticleNumberNull() {
        return isNull(getEuropeanArticleNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEuropeanArticleNumber
     * @see #setEuropeanArticleNumber
     */
    public final boolean isEuropeanArticleNumberDefaultValue() {
        return isDefaultValue(getEuropeanArticleNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'ReleaseDate' */

    /** Attribute <code>ReleaseDate</code> cache ID */
    private static int releaseDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ReleaseDate",CID));

    /**
     * Gets the <code>ReleaseDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getReleaseDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(releaseDateCID);
    }


    /**
     * Gets the <code>ReleaseDate</code> attribute value.
     * @return the value
     *
     * @see #setReleaseDate
     * @see #removeReleaseDate
     */
    public final java.util.GregorianCalendar getReleaseDate() {
        return getDate(getReleaseDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ReleaseDate</code> attribute value.
     * @param val the new value
     *
     * @see #getReleaseDate
     * @see #removeReleaseDate
     */
    public final void setReleaseDate(java.util.GregorianCalendar val) {
        setDate(getReleaseDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ReleaseDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getReleaseDate
     * @see #setReleaseDate
     */
    public final void removeReleaseDate() {
        removeValue(getReleaseDateAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getReleaseDate
     * @see #setReleaseDate
     */
    public final boolean isReleaseDateNull() {
        return isNull(getReleaseDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getReleaseDate
     * @see #setReleaseDate
     */
    public final boolean isReleaseDateDefaultValue() {
        return isDefaultValue(getReleaseDateAttribute(getMtDatabase()));
    }


    /* Attribute 'Colours' */

    /** Attribute <code>Colours</code> cache ID */
    private static int coloursCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Colours",CID));

    /**
     * Gets the <code>Colours</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getColoursAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(coloursCID);
    }


    /**
     * Gets the <code>Colours</code> attribute value.
     * @return the value
     *
     * @see #setColours
     * @see #removeColours
     */
    public final String[] getColours() {
        return getStrings(getColoursAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Colours</code> attribute value.
     * @param val the new value
     *
     * @see #getColours
     * @see #removeColours
     */
    public final void setColours(String[] val) {
        setStrings(getColoursAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Colours</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getColours
     * @see #setColours
     */
    public final void removeColours() {
        removeValue(getColoursAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getColours
     * @see #setColours
     */
    public final boolean isColoursDefaultValue() {
        return isDefaultValue(getColoursAttribute(getMtDatabase()));
    }


    /* Attribute 'Weight' */

    /** Attribute <code>Weight</code> cache ID */
    private static int weightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Weight",CID));

    /**
     * Gets the <code>Weight</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getWeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(weightCID);
    }


    /**
     * Gets the <code>Weight</code> attribute value.
     * @return the value
     *
     * @see #setWeight
     * @see #removeWeight
     */
    public final float getWeight() {
        return getFloat(getWeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Weight</code> attribute value.
     * @param val the new value
     *
     * @see #getWeight
     * @see #removeWeight
     */
    public final void setWeight(float val) {
        setFloat(getWeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Weight</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getWeight
     * @see #setWeight
     */
    public final void removeWeight() {
        removeValue(getWeightAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getWeight
     * @see #setWeight
     */
    public final boolean isWeightNull() {
        return isNull(getWeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getWeight
     * @see #setWeight
     */
    public final boolean isWeightDefaultValue() {
        return isDefaultValue(getWeightAttribute(getMtDatabase()));
    }


    /* Attribute 'Height' */

    /** Attribute <code>Height</code> cache ID */
    private static int heightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Height",CID));

    /**
     * Gets the <code>Height</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getHeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(heightCID);
    }


    /**
     * Gets the <code>Height</code> attribute value.
     * @return the value
     *
     * @see #setHeight
     * @see #removeHeight
     */
    public final float getHeight() {
        return getFloat(getHeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Height</code> attribute value.
     * @param val the new value
     *
     * @see #getHeight
     * @see #removeHeight
     */
    public final void setHeight(float val) {
        setFloat(getHeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Height</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getHeight
     * @see #setHeight
     */
    public final void removeHeight() {
        removeValue(getHeightAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getHeight
     * @see #setHeight
     */
    public final boolean isHeightNull() {
        return isNull(getHeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getHeight
     * @see #setHeight
     */
    public final boolean isHeightDefaultValue() {
        return isDefaultValue(getHeightAttribute(getMtDatabase()));
    }


    /* Attribute 'Depth' */

    /** Attribute <code>Depth</code> cache ID */
    private static int depthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Depth",CID));

    /**
     * Gets the <code>Depth</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDepthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(depthCID);
    }


    /**
     * Gets the <code>Depth</code> attribute value.
     * @return the value
     *
     * @see #setDepth
     * @see #removeDepth
     */
    public final float getDepth() {
        return getFloat(getDepthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Depth</code> attribute value.
     * @param val the new value
     *
     * @see #getDepth
     * @see #removeDepth
     */
    public final void setDepth(float val) {
        setFloat(getDepthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Depth</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDepth
     * @see #setDepth
     */
    public final void removeDepth() {
        removeValue(getDepthAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDepth
     * @see #setDepth
     */
    public final boolean isDepthNull() {
        return isNull(getDepthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDepth
     * @see #setDepth
     */
    public final boolean isDepthDefaultValue() {
        return isDefaultValue(getDepthAttribute(getMtDatabase()));
    }


    /* Attribute 'EnergyEfficiency' */

    /** Attribute <code>EnergyEfficiency</code> cache ID */
    private static int energyEfficiencyCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("EnergyEfficiency",CID));

    /**
     * Gets the <code>EnergyEfficiency</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEnergyEfficiencyAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(energyEfficiencyCID);
    }


    /**
     * Gets the <code>EnergyEfficiency</code> attribute value.
     * @return the value
     *
     * @see #setEnergyEfficiency
     * @see #removeEnergyEfficiency
     */
    public final String getEnergyEfficiency() {
        return getString(getEnergyEfficiencyAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>EnergyEfficiency</code> attribute value.
     * @param val the new value
     *
     * @see #getEnergyEfficiency
     * @see #removeEnergyEfficiency
     */
    public final void setEnergyEfficiency(String val) {
        setString(getEnergyEfficiencyAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>EnergyEfficiency</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEnergyEfficiency
     * @see #setEnergyEfficiency
     */
    public final void removeEnergyEfficiency() {
        removeValue(getEnergyEfficiencyAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getEnergyEfficiency
     * @see #setEnergyEfficiency
     */
    public final boolean isEnergyEfficiencyNull() {
        return isNull(getEnergyEfficiencyAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEnergyEfficiency
     * @see #setEnergyEfficiency
     */
    public final boolean isEnergyEfficiencyDefaultValue() {
        return isDefaultValue(getEnergyEfficiencyAttribute(getMtDatabase()));
    }


    /* Attribute 'EnergyConsumption' */

    /** Attribute <code>EnergyConsumption</code> cache ID */
    private static int energyConsumptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("EnergyConsumption",CID));

    /**
     * Gets the <code>EnergyConsumption</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEnergyConsumptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(energyConsumptionCID);
    }


    /**
     * Gets the <code>EnergyConsumption</code> attribute value.
     * @return the value
     *
     * @see #setEnergyConsumption
     * @see #removeEnergyConsumption
     */
    public final int getEnergyConsumption() {
        return getInteger(getEnergyConsumptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>EnergyConsumption</code> attribute value.
     * @param val the new value
     *
     * @see #getEnergyConsumption
     * @see #removeEnergyConsumption
     */
    public final void setEnergyConsumption(int val) {
        setInteger(getEnergyConsumptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>EnergyConsumption</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEnergyConsumption
     * @see #setEnergyConsumption
     */
    public final void removeEnergyConsumption() {
        removeValue(getEnergyConsumptionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getEnergyConsumption
     * @see #setEnergyConsumption
     */
    public final boolean isEnergyConsumptionNull() {
        return isNull(getEnergyConsumptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEnergyConsumption
     * @see #setEnergyConsumption
     */
    public final boolean isEnergyConsumptionDefaultValue() {
        return isDefaultValue(getEnergyConsumptionAttribute(getMtDatabase()));
    }


    /* Attribute 'Description' */

    /** Attribute <code>Description</code> cache ID */
    private static int descriptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Description",CID));

    /**
     * Gets the <code>Description</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDescriptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(descriptionCID);
    }


    /**
     * Gets the <code>Description</code> attribute value.
     * @return the value
     *
     * @see #setDescription
     * @see #removeDescription
     */
    public final String getDescription() {
        return getString(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Description</code> attribute value.
     * @param val the new value
     *
     * @see #getDescription
     * @see #removeDescription
     */
    public final void setDescription(String val) {
        setString(getDescriptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Description</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final void removeDescription() {
        removeValue(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionNull() {
        return isNull(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionDefaultValue() {
        return isDefaultValue(getDescriptionAttribute(getMtDatabase()));
    }


    /* Attribute 'Images' */

    /** Attribute <code>Images</code> cache ID */
    private static int imagesCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Images",CID));

    /**
     * Gets the <code>Images</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getImagesAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(imagesCID);
    }


    /**
     * Gets the <code>Images</code> attribute value.
     * @return the value
     *
     * @see #setImages
     * @see #removeImages
     */
    public final byte[] getImages() {
        return getBytes(getImagesAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Images</code> attribute value.
     * @param val the new value
     *
     * @see #getImages
     * @see #removeImages
     */
    public final void setImages(byte[] val) {
        setBytes(getImagesAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Images</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getImages
     * @see #setImages
     */
    public final void removeImages() {
        removeValue(getImagesAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getImages
     * @see #setImages
     */
    public final boolean isImagesNull() {
        return isNull(getImagesAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getImages
     * @see #setImages
     */
    public final boolean isImagesDefaultValue() {
        return isDefaultValue(getImagesAttribute(getMtDatabase()));
    }

    /**
     * Gets the <code>Images</code> attribute list size.
     * @return the number of elements in the list
     *
     * @see #setImagesElements
     * @see #getImagesElements
     */
    public final long getImagesSize() {
        return getListSize(getImagesAttribute(getMtDatabase()));
    }

    /**
     * Reads <code>Images</code> attribute value elements into a portion of an array.
     * @param value destination buffer
     * @param offset offset at which to start storing elements
     * @param len the maximum number of elements to read
     * @return the number of elements read
     *
     * @see #setImagesElements
     * @see #getImagesSize
     */
    public final int getImagesElements(byte[] value, long offset, int len) {
        return getBytesElements(getImagesAttribute(getMtDatabase()), value, len, offset);
    }

    /**
     * Writes a portion of an array of elements to the <code>Images</code> attribute value.
     * @param value an array of elements
     * @param offset offset from which to start writing characters
     * @param len number of characters to write
     * @param discardAfter truncate the remaining part of the attribute
     *
     * @see #getImagesElements
     * @see #getImagesSize
     */
    public final void setImagesElements(byte[] value, long offset, int len, boolean discardAfter) {
        setBytesElements(getImagesAttribute(getMtDatabase()), value, len, offset, discardAfter);
    }


    /* Attribute 'Width' */

    /** Attribute <code>Width</code> cache ID */
    private static int widthCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Width",CID));

    /**
     * Gets the <code>Width</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getWidthAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(widthCID);
    }


    /**
     * Gets the <code>Width</code> attribute value.
     * @return the value
     *
     * @see #setWidth
     * @see #removeWidth
     */
    public final float getWidth() {
        return getFloat(getWidthAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Width</code> attribute value.
     * @param val the new value
     *
     * @see #getWidth
     * @see #removeWidth
     */
    public final void setWidth(float val) {
        setFloat(getWidthAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Width</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getWidth
     * @see #setWidth
     */
    public final void removeWidth() {
        removeValue(getWidthAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getWidth
     * @see #setWidth
     */
    public final boolean isWidthNull() {
        return isNull(getWidthAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getWidth
     * @see #setWidth
     */
    public final boolean isWidthDefaultValue() {
        return isDefaultValue(getWidthAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'ProductCategory' */

    /** Relationship <code>ProductCategory</code> cache ID */
    private static int productCategoryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("ProductCategory",CID));

    /**
     * Gets the <code>ProductCategory</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getProductCategoryRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(productCategoryCID);
    }

    /**
     * Gets the <code>ProductCategory</code> sucessor object.
     * @return an object 
     *
     * @see #setProductCategory
     * @see #clearProductCategory
     */
    public final com.joe.models.Category getProductCategory() {
        return (com.joe.models.Category)getSuccessor(getProductCategoryRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>ProductCategory</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getProductCategory
     * @see #clearProductCategory
     */
    public final void setProductCategory(com.joe.models.Category succ) {
        setSuccessor(getProductCategoryRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>ProductCategory</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearProductCategory() {
        clearSuccessors(getProductCategoryRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'referenceNo_IDX' */

    /** Index <code>referenceNo_IDX</code> cache ID */
    private static int referenceNo_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.referenceNo_IDX"));

    /**
     * Gets the <code>referenceNo_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getReferenceNo_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(referenceNo_IDXIndexCID);
    }

    /**
     * Finds one <code>Product</code> object in index <code>referenceNo_IDX</code>.
     * @param db a database
     * @param reference search parameter
     * @return the matching <code>Product</code> object or <code>null</code> if none was found
     */
    public static Product lookupReferenceNo_IDX(com.matisse.MtDatabase db, String reference) {
        return (Product)getReferenceNo_IDXIndex(db).lookup(new Object[] {reference}, getClass(db));
    }

    /**
     * Finds <code>Product</code> objects in index <code>referenceNo_IDX</code>.
     * @param db a database
     * @param reference search parameter
     * @return the matching <code>Product</code> objects or an empty array if none was found
     */
    public static Product[] lookupObjectsReferenceNo_IDX(com.matisse.MtDatabase db, String reference) {
        return (Product[])getReferenceNo_IDXIndex(db).lookupObjects(new Object[] {reference}, getClass(db), Product.class);
    }

    /**
     * Opens an iterator on index <code>referenceNo_IDX</code> for class <code>Product</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromReference search parameter
     * @param toReference search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> referenceNo_IDXIterator(com.matisse.MtDatabase db, String fromReference, String toReference) {
        return getReferenceNo_IDXIndex(db).<E>iterator(new Object[] {fromReference}, new Object[] {toReference}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Product.class);
    }

    /**
     * Opens an iterator on index <code>referenceNo_IDX</code> for class <code>Product</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromReference search parameter
     * @param toReference search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> referenceNo_IDXIterator(com.matisse.MtDatabase db, String fromReference, String toReference, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getReferenceNo_IDXIndex(db).iterator(new Object[] {fromReference}, new Object[] {toReference}, filterClass, direction, numObjPerBuffer, Product.class);
    }

    /* Index 'ProductName_IDX' */

    /** Index <code>ProductName_IDX</code> cache ID */
    private static int productName_IDXIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("com.joe.models.ProductName_IDX"));

    /**
     * Gets the <code>ProductName_IDX</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getProductName_IDXIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(productName_IDXIndexCID);
    }

    /**
     * Finds one <code>Product</code> object in index <code>ProductName_IDX</code>.
     * @param db a database
     * @param brand search parameter
     * @param name search parameter
     * @return the matching <code>Product</code> object or <code>null</code> if none was found
     */
    public static Product lookupProductName_IDX(com.matisse.MtDatabase db, String brand, String name) {
        return (Product)getProductName_IDXIndex(db).lookup(new Object[] {brand, name}, getClass(db));
    }

    /**
     * Finds <code>Product</code> objects in index <code>ProductName_IDX</code>.
     * @param db a database
     * @param brand search parameter
     * @param name search parameter
     * @return the matching <code>Product</code> objects or an empty array if none was found
     */
    public static Product[] lookupObjectsProductName_IDX(com.matisse.MtDatabase db, String brand, String name) {
        return (Product[])getProductName_IDXIndex(db).lookupObjects(new Object[] {brand, name}, getClass(db), Product.class);
    }

    /**
     * Opens an iterator on index <code>ProductName_IDX</code> for class <code>Product</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromBrand search parameter
     * @param fromName search parameter
     * @param toBrand search parameter
     * @param toName search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> productName_IDXIterator(com.matisse.MtDatabase db, String fromBrand, String fromName, String toBrand, String toName) {
        return getProductName_IDXIndex(db).<E>iterator(new Object[] {fromBrand, fromName}, new Object[] {toBrand, toName}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Product.class);
    }

    /**
     * Opens an iterator on index <code>ProductName_IDX</code> for class <code>Product</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromBrand search parameter
     * @param fromName search parameter
     * @param toBrand search parameter
     * @param toName search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> productName_IDXIterator(com.matisse.MtDatabase db, String fromBrand, String fromName, String toBrand, String toName, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getProductName_IDXIndex(db).iterator(new Object[] {fromBrand, fromName}, new Object[] {toBrand, toName}, filterClass, direction, numObjPerBuffer, Product.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Product(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Product]";
    }
}
